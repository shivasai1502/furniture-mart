*****************
File name: admin_category.py
Content:
import json
from flask import Blueprint, request, jsonify, make_response
from database import db
from bson.objectid import ObjectId
from admin_utils import token_required
from gridfs import GridFS

admin_category_bp = Blueprint('category', __name__)

fs = GridFS(db)

@admin_category_bp.route('/all', methods=['GET'])
@token_required
def get_categories(current_user):
    try:
        categories = list(db.categories.find())
        
        # Fetch products for each category
        for category in categories:
            products = list(db.products.find({'category': category['link']}))
            category['products'] = products
        
        return json.dumps(categories, default=str), 200
    except Exception as e:
        print(f"Error fetching categories: {str(e)}")
        return jsonify({'error': 'An error occurred while fetching categories'}), 500

@admin_category_bp.route('/insert', methods=['POST'])
@token_required
def add_category(current_user):
    try:
        data = request.form
        category_name = data.get('CategoryName')
        link = category_name.lower().replace(' ', '-')
        image = request.files.get('image')

        # Check if the category already exists (case-insensitive)
        existing_category = db.categories.find_one({'CategoryName': {'$regex': f'^{category_name}$', '$options': 'i'}})
        if existing_category:
            return jsonify({'error': 'Category already exists'}), 400

        if image:
            # Save the image file and get the image ID
            image_id = save_image(image)
        else:
            image_id = None

        # Capitalize the category name
        category_name = ' '.join(word.capitalize() for word in category_name.split())

        category = {
            'CategoryName': category_name,
            'link': link,
            'image_id': image_id
        }

        db.categories.insert_one(category)
        return jsonify({'message': 'Category added successfully'}), 201
    except Exception as e:
        print(f"Error adding category: {str(e)}")
        return jsonify({'error': 'An error occurred while adding category'}), 500

@admin_category_bp.route('/edit/<string:category_id>', methods=['PUT'])
@token_required
def update_category(current_user, category_id):
    try:
        data = request.form
        category_name = data.get('CategoryName')
        link = category_name.lower().replace(' ', '-')
        image = request.files.get('image')

        category = db.categories.find_one({'_id': ObjectId(category_id)})

        if category:
            update_data = {
                'CategoryName': category_name,
                'link': link
            }

            if image:
                # Save the new image file and get the image ID
                image_id = save_image(image)
                update_data['image_id'] = image_id

            db.categories.update_one({'_id': ObjectId(category_id)}, {'$set': update_data})
            return jsonify({'message': 'Category updated successfully'}), 200
        else:
            return jsonify({'error': 'Category not found'}), 404
    except Exception as e:
        print(f"Error updating category: {str(e)}")
        return jsonify({'error': 'An error occurred while updating category'}), 500

@admin_category_bp.route('/delete/<string:category_id>', methods=['DELETE'])
@token_required
def delete_category(current_user, category_id):
    try:
        category = db.categories.find_one({'_id': ObjectId(category_id)})

        if category:
            db.categories.delete_one({'_id': ObjectId(category_id)})
            return jsonify({'message': 'Category deleted successfully'}), 200
        else:
            return jsonify({'error': 'Category not found'}), 404
    except Exception as e:
        print(f"Error deleting category: {str(e)}")
        return jsonify({'error': 'An error occurred while deleting category'}), 500

@admin_category_bp.route('/image/<string:image_id>', methods=['GET'])
def get_image(image_id):
    try:
        image = fs.get(ObjectId(image_id))
        response = make_response(image.read())
        response.headers['Content-Type'] = 'image/jpeg'  # Adjust the content type based on the image format
        return response
    except Exception as e:
        print(f"Error retrieving image: {str(e)}")
        return jsonify({'error': 'An error occurred while retrieving the image'}), 500

def save_image(image):
    try:
        # Store the image in GridFS
        image_id = fs.put(image.read(), filename=image.filename)
        return str(image_id)
    except Exception as e:
        print(f"Error saving image: {str(e)}")
        return None*****************
*****************
File name: admin_handle_orders.py
Content:
import json
from flask import Blueprint, request, jsonify
import jwt
import datetime
from database import db
from bson import ObjectId, json_util
from jsonencoder import JSONEncoder
from admin_utils import token_required

admin_handle_orders_bp = Blueprint('handleorders', __name__)

@admin_handle_orders_bp.route('/all', methods=['GET'])
@token_required
def get_orders(user):
    handle_orders = db.orders.find()
    orders = []
    for order in handle_orders:
        customer_details = db.customer.find_one({'_id': ObjectId(order['userId'])})
        order_details = {
            '_id': str(order['_id']),
            'customerName': customer_details['firstname'] + ' ' + customer_details['lastname'],
            'Totalcost': order['Totalcost'],
            'orderTime': order['orderTime'],
            'items': order['items']
        }
        orders.append(order_details)
    return jsonify(orders), 200

@admin_handle_orders_bp.route('/<order_id>', methods=['GET'])
@token_required
def get_order_details(user, order_id):
    order = db.orders.find_one({'_id': ObjectId(order_id)})
    customer_details = db.customer.find_one({'_id': ObjectId(order['userId'])})
    if not order or not customer_details:
        return jsonify({'error': 'Order not found'}), 404
    order_items = []
    for item in order['items']:
        product = db.products.find_one({'_id': ObjectId(item['_id'])})
        order_item = {
            'product_id': str(item['_id']),
            'name': product['name'],
            'image_id': product['image_id'],
            'quantity': item['quantity'],
            'deliveryStatus': item.get('deliveryStatus'),
            'EstimatedDeliveryDate': item.get('EstimatedDeliveryDate'),
            'DeliveryDate': item.get('DeliveryDate'),
            'Cost': item['Cost']
        }
        order_items.append(order_item)
    order_details = {
        '_id': str(order['_id']),
        'items': order_items,
        'Totalcost': order['Totalcost'],
        'tax': order.get('tax'),
        'discount': order.get('discount'),
        'paymentId': order.get('paymentId'),
        'phoneNumber': order.get('phoneNumber'),
        'address': order['address'],
        'orderTime': order['orderTime']
    }
    return json.dumps(order_details, cls=JSONEncoder), 200

@admin_handle_orders_bp.route('/update/<order_id>', methods=['PUT'])
@token_required
def update_order_details(user, order_id):
    data = request.get_json()
    item_id = data.get('itemId')
    field = data.get('field')
    value = data.get('value')
    order = db.orders.find_one({'_id': ObjectId(order_id)})
    if not order:
        return jsonify({'error': 'Order not found'}), 404
    for item in order['items']:
        if str(item['_id']) == item_id:
            item[field] = value
            break
    db.orders.update_one({'_id': ObjectId(order_id)}, {'$set': {'items': order['items']}})
    return jsonify({'message': 'Order updated successfully'}), 200*****************
*****************
File name: admin_order_utility_details.py
Content:
from flask import Blueprint, request, jsonify
from database import db

admin_order_utility_details_bp = Blueprint('admin_order_utility_details_bp', __name__)

@admin_order_utility_details_bp.route('/get-order-utility-details', methods=['GET'])
def get_order_utility_details():
    try:
        # Fetch the admin_order_utility_details from the database
        utility_details = db.admin_order_utility_details.find_one()

        if utility_details:
            # Extract the required fields from the utility_details
            tax_rate = utility_details['taxrate']
            delivery_charge = utility_details['deliverycharge']
            coupons = utility_details['coupons']

            # Return the utility details as a JSON response
            return jsonify({
                'taxRate': tax_rate,
                'deliveryCharge': delivery_charge,
                'coupons': coupons
            }), 200
        else:
            return jsonify({'error': 'Order utility details not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@admin_order_utility_details_bp.route('/validate', methods=['POST'])
def validate_coupon():
    try:
        coupon_code = request.json['couponCode']

        # Fetch the admin_order_utility_details from the database
        utility_details = db.admin_order_utility_details.find_one()

        if utility_details:
            coupons = utility_details['coupons']

            # Check if the coupon code exists in the coupons array
            for coupon in coupons:
                if coupon['code'] == coupon_code:
                    discount = coupon['discount']
                    # Extract the discount percentage from the discount string
                    discount_percentage = int(discount[:-1])
                    return jsonify({
                        'isValid': True,
                        'discountPercentage': discount_percentage
                    }), 200

            return jsonify({'isValid': False}), 200
        else:
            return jsonify({'error': 'Order utility details not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500*****************
*****************
File name: admin_products.py
Content:
import json
from flask import Blueprint, request, jsonify, make_response
from database import db
from bson.objectid import ObjectId
from admin_utils import token_required
from gridfs import GridFS

admin_toys_bp = Blueprint('product', __name__)
fs = GridFS(db)

@admin_toys_bp.route('/all', methods=['GET'])
@token_required
def get_all_products(current_user):
    try:
        products = list(db.products.find())
        return json.dumps(products, default=str), 200
    except Exception as e:
        print(f"Error fetching products: {str(e)}")
        return jsonify({'error': 'An error occurred while fetching products'}), 500

@admin_toys_bp.route('/insert', methods=['POST'])
@token_required
def add_product(current_user):
    try:
        data = request.form
        name = data.get('name')
        description = data.get('description')
        price = float(data.get('price'))
        category = data.get('category')
        age_range = data.get('age_range')
        unit= data.get('unit')
        stock = int(data.get('stock'))
        image = request.files.get('image')
        
        if image:
            image_id = fs.put(image.read(), filename=image.filename)
        else:
            image_id = None
        
        product = {
            'name': name,
            'description': description,
            'price': price,
            'category': category,
            'unit': unit,
            'age_range': age_range,
            'image_id': image_id,
            'stock': stock
        }
        
        db.products.insert_one(product)
        
        return jsonify({'message': 'Product added successfully'}), 201
    except Exception as e:
        print(f"Error adding product: {str(e)}")
        return jsonify({'error': 'An error occurred while adding the product'}), 500

@admin_toys_bp.route('/<string:product_id>', methods=['GET'])
@token_required
def get_product(current_user, product_id):
    try:
        product = db.products.find_one({'_id': ObjectId(product_id)})
        if product:
            return json.dumps(product, default=str), 200
        else:
            return jsonify({'error': 'Product not found'}), 404
    except Exception as e:
        print(f"Error fetching product: {str(e)}")
        return jsonify({'error': 'An error occurred while fetching the product'}), 500

@admin_toys_bp.route('/edit/<string:product_id>', methods=['PUT'])
@token_required
def update_product(current_user, product_id):
    try:
        data = request.form
        name = data.get('name')
        description = data.get('description')
        price = float(data.get('price'))
        category = data.get('category')
        age_range = data.get('age_range')
        unit= data.get('unit') if data.get('unit') else None
        stock = int(data.get('stock'))
        image = request.files.get('image')
        
        product = db.products.find_one({'_id': ObjectId(product_id)})
        
        if product:
            update_data = {
                'name': name,
                'description': description,
                'price': price,
                'category': category,
                'unit': unit, # Add this line to update the 'unit' field
                'age_range': age_range,
                'stock': stock
            }
            
            if image:
                image_id = fs.put(image.read(), filename=image.filename)
                update_data['image_id'] = image_id
            
            db.products.update_one({'_id': ObjectId(product_id)}, {'$set': update_data})
            
            return jsonify({'message': 'Product updated successfully'}), 200
        else:
            return jsonify({'error': 'Product not found'}), 404
    except Exception as e:
        print(f"Error updating product: {str(e)}")
        return jsonify({'error': 'An error occurred while updating the product'}), 500

@admin_toys_bp.route('/delete/<string:product_id>', methods=['DELETE'])
@token_required
def delete_product(current_user, product_id):
    try:
        product = db.products.find_one({'_id': ObjectId(product_id)})
        if product:
            db.products.delete_one({'_id': ObjectId(product_id)})
            return jsonify({'message': 'Product deleted successfully'}), 200
        else:
            return jsonify({'error': 'Product not found'}), 404
    except Exception as e:
        print(f"Error deleting product: {str(e)}")
        return jsonify({'error': 'An error occurred while deleting the product'}), 500*****************
*****************
File name: admin_routes.py
Content:
import json
from flask import Blueprint, request, jsonify
import jwt
import datetime
from database import db
from bson import json_util
from jsonencoder import JSONEncoder
from admin_utils import token_required

admin_routes = Blueprint('admin', __name__)

@admin_routes.route('/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
        admin = db.admin.find_one({'email': email})
        if not admin:
            return jsonify({'error': 'Invalid username or password'}), 401
        if admin['password'] != password:
            return jsonify({'error': 'Invalid username or password'}), 401
        current_time = datetime.datetime.now(datetime.timezone.utc)
        expiration_time = current_time + datetime.timedelta(minutes=60)
        admin_token = jwt.encode({
            'email': email,
            'iat': current_time,
            'exp': expiration_time
        }, 'secret_key', algorithm='HS256')
        return jsonify({'admin_token': admin_token}), 200
    except Exception as e:
        print(f"Error during login: {str(e)}")
        return jsonify({'error': 'An error occurred during login'}), 500

@admin_routes.route('/utility', methods=['GET'])
@token_required
def get_utility_data(current_user):
    try:
        utility_data = db.admin_order_utility_details.find_one()
        return json_util.dumps(utility_data), 200
    except Exception as e:
        print(f"Error fetching utility data: {str(e)}")
        return jsonify({'error': 'An error occurred while fetching utility data'}), 500

@admin_routes.route('/utility', methods=['PUT'])
@token_required
def update_utility_data(current_user):
    try:
        data = request.get_json()
        taxrate = data.get('taxrate')
        deliverycharge = data.get('deliverycharge')
        db.admin_order_utility_details.update_one(
            {},
            {'$set': {'taxrate': taxrate, 'deliverycharge': deliverycharge}}
        )
        return jsonify({'message': 'Utility data updated successfully'}), 200
    except Exception as e:
        print(f"Error updating utility data: {str(e)}")
        return jsonify({'error': 'An error occurred while updating utility data'}), 500

@admin_routes.route('/coupons', methods=['POST'])
@token_required
def add_coupon(current_user):
    try:
        data = request.get_json()
        code = data.get('code')
        discount = data.get('discount')
        db.admin_order_utility_details.update_one(
            {},
            {'$push': {'coupons': {'code': code, 'discount': discount}}}
        )
        return jsonify({'message': 'Coupon added successfully'}), 201
    except Exception as e:
        print(f"Error adding coupon: {str(e)}")
        return jsonify({'error': 'An error occurred while adding coupon'}), 500

@admin_routes.route('/coupons/<code>', methods=['DELETE'])
@token_required
def delete_coupon(current_user, code):
    try:
        db.admin_order_utility_details.update_one(
            {},
            {'$pull': {'coupons': {'code': code}}}
        )
        return jsonify({'message': 'Coupon deleted successfully'}), 200
    except Exception as e:
        print(f"Error deleting coupon: {str(e)}")
        return jsonify({'error': 'An error occurred while deleting coupon'}), 500

@admin_routes.route('/toys', methods=['GET'])
@token_required
def get_toy_data(current_user):
    try:
        total_toys = db.products.aggregate([
            {
                '$group': {
                    '_id': None,
                    'total': {'$sum': '$stock'}
                }
            }
        ]).next()['total']
        
        out_of_stock_toys = db.products.count_documents({'stock': 0})
        
        categories = list(db.categories.aggregate([
            {
                '$lookup': {
                    'from': 'products',
                    'localField': 'link',
                    'foreignField': 'category',
                    'as': 'products'
                }
            },
            {
                '$project': {
                    'CategoryName': 1,
                    'totalToys': {'$sum': '$products.stock'}
                }
            }
        ]))
        
        return json.dumps({
            'totalToys': total_toys,
            'outOfStockToys': out_of_stock_toys,
            'categories': categories
        }, cls=JSONEncoder), 200
    except Exception as e:
        print(f"Error fetching toy data: {str(e)}")
        return jsonify({'error': 'An error occurred while fetching toy data'}), 500
*****************
*****************
File name: admin_utils.py
Content:
from functools import wraps
from flask import request, jsonify
import jwt
from database import db

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        admin_token = None
        if 'Authorization' in request.headers:
            admin_token = request.headers['Authorization'].split(' ')[1]
        if not admin_token:
            return jsonify({'error': 'Token is missing'}), 401
        try:
            data = jwt.decode(admin_token, 'secret_key', algorithms=['HS256'])
            current_user = db.admin.find_one({'email': data['email']})
            if not current_user:
                return jsonify({'error': 'Invalid token'}), 401
        except jwt.ExpiredSignatureError:
            return jsonify({'error': 'Token has expired'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'error': 'Invalid token'}), 401
        return f(current_user, *args, **kwargs)
    return decorated*****************
*****************
File name: app.py
Content:
from flask import Flask
from flask_cors import CORS
from routes import auth_routes
from products import products_bp
from cart import cart_bp
from profile import profile_bp
from admin_order_utility_details import admin_order_utility_details_bp
from order import order_bp
from categories import category_bp
from admin_routes import admin_routes
from admin_category import admin_category_bp
from admin_products import admin_toys_bp
from admin_handle_orders import admin_handle_orders_bp

app = Flask(__name__)
CORS(app)

app.register_blueprint(auth_routes, url_prefix='/api/auth')
app.register_blueprint(products_bp, url_prefix='/api/products')
app.register_blueprint(cart_bp, url_prefix='/api/cart')
app.register_blueprint(profile_bp, url_prefix='/api/profile')
app.register_blueprint(admin_order_utility_details_bp, url_prefix='/api/admin_order_utility_details')
app.register_blueprint(order_bp, url_prefix='/api/orders' )
app.register_blueprint(category_bp, url_prefix='/api/categories')
app.register_blueprint(admin_routes, url_prefix='/api/admin')
app.register_blueprint(admin_category_bp, url_prefix='/api/admin/category')
app.register_blueprint(admin_toys_bp, url_prefix='/api/admin/product')
app.register_blueprint(admin_handle_orders_bp, url_prefix='/api/admin/handleorders')

if __name__ == '__main__':
    app.run(debug=True)*****************
*****************
File name: auth_utils.py
Content:
from functools import wraps
from flask import request, jsonify
import jwt
from database import db

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None
        if 'Authorization' in request.headers:
            token = request.headers['Authorization'].split(' ')[1]
        if not token:
            return jsonify({'error': 'Token is missing'}), 401
        try:
            data = jwt.decode(token, 'secret_key', algorithms=['HS256'])
            current_user = db.customer.find_one({'email': data['email']})
            if not current_user:
                return jsonify({'error': 'Invalid token'}), 401
        except jwt.ExpiredSignatureError:
            return jsonify({'error': 'Token has expired'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'error': 'Invalid token'}), 401
        return f(current_user, *args, **kwargs)
    return decorated*****************
*****************
File name: cart.py
Content:
import json
from flask import Blueprint, request, jsonify
from database import db
from auth_utils import token_required
from bson import ObjectId
from jsonencoder import JSONEncoder

cart_bp = Blueprint('cart', __name__)

@cart_bp.route('/insert', methods=['POST'])
@token_required
def add_to_cart(current_user):
    data = request.json
    product_id = data['product_id']
    cart = db.cart.find_one({'user_id': current_user['_id']})
    if cart:
        # If cart exists, check if the product is already in the cart
        product_in_cart = next((p for p in cart['products'] if p['product_id'] == ObjectId(product_id)), None)
        if product_in_cart:
            # If the product is already in the cart, increment the quantity
            db.cart.update_one(
                {'_id': cart['_id'], 'products.product_id': ObjectId(product_id)},
                {'$inc': {'products.$.quantity': 1}}
            )
        else:
            # If the product is not in the cart, add it with quantity 1
            db.cart.update_one(
                {'_id': cart['_id']},
                {'$push': {'products': {'product_id': ObjectId(product_id), 'quantity': 1}}}
            )
    else:
        # If cart doesn't exist, create a new cart with the product and quantity 1
        new_cart = {
            'user_id': current_user['_id'],
            'products': [{'product_id': ObjectId(product_id), 'quantity': 1}]
        }
        db.cart.insert_one(new_cart)
    return jsonify({'message': 'Product added to cart successfully'})

@cart_bp.route('/delete', methods=['DELETE'])
@token_required
def remove_from_cart(current_user):
    cart = db.cart.find_one({'user_id': current_user['_id']})
    if cart:
        # Remove all products from the cart
        db.cart.update_one(
            {'_id': cart['_id']},
            {'$set': {'products': []}}
        )
        return jsonify({'message': 'All products removed from cart successfully'})
    else:
        return jsonify({'error': 'Cart not found'}), 404

@cart_bp.route('/all', methods=['GET'])
@token_required
def get_cart_products(current_user):
    cart = db.cart.find_one({'user_id': current_user['_id']})
    if cart:
        product_ids = [product['product_id'] for product in cart['products']]
        products = list(db.products.find({'_id': {'$in': product_ids}}))
        cart_products = []
        for product in products:
            quantity = next(p['quantity'] for p in cart['products'] if p['product_id'] == product['_id'])
            cart_products.append({**product, 'quantity': quantity})
        return json.dumps(cart_products, cls=JSONEncoder)
    else:
        return jsonify({'error': 'Cart not found'}), 404

@cart_bp.route('/update', methods=['PUT'])
@token_required
def update_quantity(current_user):
    data = request.json
    product_id = data['product_id']
    quantity = data['quantity']
    cart = db.cart.find_one({'user_id': current_user['_id']})
    if cart:
        db.cart.update_one(
            {'_id': cart['_id'], 'products.product_id': ObjectId(product_id)},
            {'$set': {'products.$.quantity': quantity}}
        )
        return jsonify({'message': 'Quantity updated successfully'})
    else:
        return jsonify({'error': 'Cart not found'}), 404*****************
*****************
File name: categories.py
Content:
from io import BytesIO
import json
from bson import ObjectId
from flask import Blueprint, jsonify, send_file
from database import db
from gridfs import GridFS
from jsonencoder import JSONEncoder

category_bp = Blueprint('categories', __name__)
fs=GridFS(db)

@category_bp.route('/all', methods=['GET'])
def get_categories():
    categories = list(db.categories.find())
    for category in categories:
        category['_id'] = str(category['_id'])
        category['image_id'] = category['image_id']
    return json.dumps(categories, cls=JSONEncoder), 200


@category_bp.route('/images/<image_id>', methods=['GET'])
def get_image(image_id):
    try:
        image_file = fs.get(ObjectId(image_id))
        #print(f"Image file found: {image_file.filename}")
        #print(f"Image file length: {image_file.length}")
        return send_file(
            BytesIO(image_file.read()),
            mimetype='image/png',
            as_attachment=False
        )
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return jsonify({'error': f'Unexpected error: {str(e)}'}), 500

def get_image_url(image_id):
    return f'images{image_id}'*****************
*****************
File name: database.py
Content:
from pymongo import MongoClient

client = MongoClient('mongodb://localhost:27017')
db = client['toy_store']*****************
*****************
File name: file_contents.txt
Content:
*****************
*****************
File name: jsonencoder.py
Content:
import json

from bson import ObjectId


class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)*****************
*****************
File name: order.py
Content:
from datetime import datetime
import json
from bson import ObjectId
from flask import Blueprint, request, jsonify
from flask_mail import Message
from database import db
from auth_utils import token_required
from werkzeug.security import generate_password_hash
from jsonencoder import JSONEncoder
from datetime import datetime, timedelta
order_bp = Blueprint('orders', __name__)

@order_bp.route('/payments', methods=['GET'])
@token_required
def get_saved_payment_methods(user):
    email = user['email']
    saved_payments = db.payments.find({'email': email})
    payment_methods = []
    for payment in saved_payments:
        payment_method = {
            '_id': str(payment['_id']),
            'cardholderName': payment.get('cardholderName', ''),
            'cardNumber': payment['cardNumber'],
            'expiryDate': payment['expiryDate'],
            'paymentMethodName': payment.get('paymentMethodName', '')
        }
        payment_methods.append(payment_method)
    return jsonify(payment_methods), 200

@order_bp.route('/place', methods=['POST'])
@token_required
def place_order(user):
    order_data = request.json
    items = order_data.get('items')
    total_cost = order_data.get('cost')
    tax = order_data.get('tax')
    discount = order_data.get('discount')
    card_details = order_data.get('cardDetails')
    email = user['email']
    phone_number = order_data.get('phoneNumber')
    address = order_data.get('address')
    
    if not items or not total_cost or not email or not address:
        return jsonify({'error': 'Required fields are missing'}), 400

    # Update stock and set additional fields for each item
    for item in items:
        product = db.products.find_one({'_id': ObjectId(item['_id'])})
        new_stock = product['stock'] - item['quantity']
        if new_stock < 0:
            return jsonify({'error': 'Insufficient stock for product: ' + product['name']}), 400
        db.products.update_one(
            {'_id': ObjectId(item['_id'])},
            {'$set': {'stock': new_stock}}
        )
        item['deliveryStatus'] = 'Pending'
        estimated_delivery_date = datetime.now() + timedelta(days=5)
        item['EstimatedDeliveryDate'] = estimated_delivery_date.strftime('%m-%d-%Y')
        item['RefundMessage'] = None
        item['DeliveryDate'] = None
        item['Cost'] = item['quantity'] * product['price']
        
    payment_id = None
    if card_details:
        # Check if the card number already exists in the payments collection
        cn = card_details.get('cardNumber')
        existing_payment = db.payments.find_one({'cardNumber': cn, 'email': email})
        if existing_payment:
            payment_id = str(existing_payment['_id'])
        else:
            # Save card details in the payments collection
            payment = {
                'cardholderName': card_details.get('cardholderName', ''),
                'cardNumber': card_details.get('cardNumber'),
                'expiryDate': card_details.get('expiryDate'),
                'email': email,
                'paymentMethodName': card_details.get('paymentMethodName', '')
            }
            payment_result = db.payments.insert_one(payment)
            payment_id = str(payment_result.inserted_id)

    # Get the current timestamp
    order_time = datetime.now().strftime('%m-%d-%Y %H:%M:%S')

    # Create the order object
    order = {
        'userId': user['_id'],
        'items': items,
        'Totalcost': total_cost,
        'tax': tax,
        'discount': discount,
        'paymentId': payment_id,
        'email': email,
        'phoneNumber': phone_number,
        'address': address,
        'orderTime': order_time
    }

    # Save the order in the orders collection
    order_result = db.orders.insert_one(order)
    order_id = str(order_result.inserted_id)

    return jsonify({'orderId': order_id }), 201

@order_bp.route('/customer', methods=['GET'])
@token_required
def get_customer_orders(user):
    user_id = user['_id']
    orders = db.orders.find({'userId': user_id}).sort('orderTime', -1)
    
    customer_orders = []
    for order in orders:
        order_items = []
        for item in order['items']:
            product = db.products.find_one({'_id': ObjectId(item['_id'])})
            order_item = {
                'product_id': str(item['_id']),
                'name': product['name'],
                'quantity': item['quantity'],
                'image_id': product['image_id'],
                'deliveryStatus': item['deliveryStatus'],
            }
            order_items.append(order_item)
                    
        customer_order = {
            '_id': str(order['_id']),
            'items': order_items,
            'orderTime': order['orderTime'],
        }
        customer_orders.append(customer_order)
    
    return json.dumps(customer_orders, cls=JSONEncoder), 200

@order_bp.route('/<order_id>', methods=['GET'])
@token_required
def get_order(user, order_id):
    user_id = user['_id']
    order = db.orders.find_one({'_id': ObjectId(order_id), 'userId': user_id})
    
    if not order:
        return jsonify({'error': 'Order not found'}), 404

    order_items = []
    for item in order['items']:
        product = db.products.find_one({'_id': ObjectId(item['_id'])})
        order_item = {
            'product_id': str(item['_id']),
            'name': product['name'],
            'image_id': product['image_id'],
            'quantity': item['quantity'],
            'deliveryStatus': item.get('deliveryStatus'),
            'EstimatedDeliveryDate': item.get('EstimatedDeliveryDate'),
            'RefundMessage': item.get('RefundMessage'),
            'DeliveryDate': item.get('DeliveryDate'),
            'Cost': item['Cost']
        }
        order_items.append(order_item)

    order_details = {
        '_id': str(order['_id']),
        'items': order_items,
        'Totalcost': order['Totalcost'],
        'tax': order.get('tax'),
        'discount': order.get('discount'),
        'paymentId': order.get('paymentId'),
        'phoneNumber': order.get('phoneNumber'),
        'address': order['address'],
        'orderTime': order['orderTime']
    }

    return json.dumps(order_details, cls=JSONEncoder), 200


@order_bp.route('/<order_id>/<item_id>/cancel', methods=['PUT'])
@token_required
def cancel_item(user, order_id, item_id):
    user_id = user['_id']
    order = db.orders.find_one({'_id': ObjectId(order_id), 'userId': user_id})

    if not order:
        return jsonify({'error': 'Order not found'}), 404

    item_to_cancel = None
    for item in order['items']:
        if str(item['_id']) == item_id:
            item_to_cancel = item
            break

    if not item_to_cancel:
        return jsonify({'error': 'Item not found in the order'}), 404

    if item_to_cancel['deliveryStatus'] != 'Pending':
        return jsonify({'error': 'Item cannot be cancelled as it is already delivered or in transit'}), 400

    # Update stock for the cancelled item
    product = db.products.find_one({'_id': ObjectId(item_to_cancel['_id'])})
    new_stock = product['stock'] + item_to_cancel['quantity']
    db.products.update_one(
        {'_id': ObjectId(item_to_cancel['_id'])},
        {'$set': {'stock': new_stock}}
    )

    item_to_cancel['deliveryStatus'] = 'Cancelled'
    item_to_cancel['EstimatedDeliveryDate'] = None
    item_to_cancel['DeliveryDate'] = None
    item_to_cancel['RefundMessage'] = f"Refund of {item_to_cancel['Cost']} processed for the cancelled item & Item will be picked up in 2-3 business days"


    db.orders.update_one(
        {'_id': ObjectId(order_id)},
        {'$set': {'items': order['items']}}
    )

    return jsonify({'message': 'Item cancelled successfully'}), 200*****************
*****************
File name: products.py
Content:
from io import BytesIO
import json
from bson import ObjectId
from flask import Blueprint, request, jsonify, send_file
from database import db
from gridfs import GridFS
from jsonencoder import JSONEncoder


products_bp = Blueprint('products', __name__)
fs=GridFS(db)
product_collection = db['products']


@products_bp.route('/category', methods=['GET'])
def get_products_by_category():
    category_id = request.args.get('category')
    if not category_id:
        return jsonify({"error": "Category ID is required"}), 400
    
    if category_id == "view-all-products":
        products = list(product_collection.find({}, {'_id': 1, 'name': 1, 'description': 1, 'price': 1, 'category': 1, 'age_range': 1, 'image_id': 1, 'stock': 1})) 
        for product in products:
            product['_id'] = str(product['_id'])
            product['image'] = get_image_url(product['image_id'])
    else:
        products = list(product_collection.find({'category': category_id}, {'_id': 1, 'name': 1, 'description': 1, 'price': 1, 'category': 1, 'age_range': 1, 'image_id': 1, 'stock': 1}))
        for product in products:
            product['_id'] = str(product['_id'])
            product['image'] = get_image_url(product['image_id'])
    return json.dumps(products, cls=JSONEncoder)

@products_bp.route('/images/<image_id>', methods=['GET'])
def get_image(image_id):
    try:
        image_file = fs.get(ObjectId(image_id))
        #print(f"Image file found: {image_file.filename}")
        #print(f"Image file length: {image_file.length}")
        return send_file(
            BytesIO(image_file.read()),
            mimetype='image/jpeg',
            as_attachment=False
        )
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return jsonify({'error': f'Unexpected error: {str(e)}'}), 500

def get_image_url(image_id):
    return f'images/{image_id}'*****************
*****************
File name: profile.py
Content:
import json
from flask import Blueprint, request, jsonify
from database import db
from auth_utils import token_required

profile_bp = Blueprint('profile', __name__)

@profile_bp.route('/get', methods=['GET'])
@token_required
def get_profile(current_user):
    customer = db.customer.find_one({'_id': current_user['_id']})
    if customer:
        customer['_id'] = str(customer['_id'])
        return jsonify(customer), 200
    else:
        return jsonify({'error': 'Customer not found'}), 404

@profile_bp.route('/update', methods=['PUT'])
@token_required
def update_profile(current_user):
    data = request.get_json()
    firstname = data.get('firstname')
    lastname = data.get('lastname')
    email = data.get('email')
    phone_number = data.get('phone_number')
    addresses = data.get('addresses')

    update_data = {}
    if firstname:
        update_data['firstname'] = firstname
    if lastname:
        update_data['lastname'] = lastname
    if email:
        update_data['email'] = email
    if phone_number:
        update_data['phone_number'] = phone_number
    if addresses:
        update_data['addresses'] = addresses

    db.customer.update_one({'_id': current_user['_id']}, {'$set': update_data})
    return jsonify({'message': 'Profile updated successfully'}), 200

@profile_bp.route('/delete-address', methods=['DELETE'])
@token_required
def delete_address(current_user):
    data = request.get_json()
    address_index = data.get('address_index')

    if address_index is None:
        return jsonify({'error': 'Address index is required'}), 400

    db.customer.update_one(
        {'_id': current_user['_id']},
        {'$unset': {f'addresses.{address_index}': 1}}
    )
    db.customer.update_one(
        {'_id': current_user['_id']},
        {'$pull': {'addresses': None}}
    )

    return jsonify({'message': 'Address deleted successfully'}), 200*****************
*****************
File name: requirements.txt
Content:
blinker==1.7.0
click==8.1.7
colorama==0.4.6
dnspython==2.6.1
Flask==3.0.2
Flask-Cors==4.0.0
Flask-PyMongo==2.3.0
itsdangerous==2.1.2
Jinja2==3.1.3
MarkupSafe==2.1.5
pymongo==4.6.3
Werkzeug==3.0.2
*****************
*****************
File name: routes.py
Content:
from flask import Blueprint, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from pymongo.errors import DuplicateKeyError
import jwt
import datetime
from database import db
from auth_utils import token_required

auth_routes = Blueprint('auth', __name__)

@auth_routes.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    firstname = data.get('firstname')
    lastname = data.get('lastname')
    email = data.get('email')
    password = data.get('password')
    date_of_birth = data.get('dateOfBirth')
    phone_number = data.get('phoneNumber')
    address = data.get('address')

    if not firstname or not lastname or not email or not password:
        return jsonify({'error': 'Please provide all required fields'}), 400

    hashed_password = generate_password_hash(password)
    customer = {
        'firstname': firstname,
        'lastname': lastname,
        'email': email,
        'password': hashed_password,
        'date_of_birth': date_of_birth,
        'phone_number': phone_number,
        'addresses': [address] if address else []
    }

    try:
        db.customer.insert_one(customer)
        return jsonify({'message': 'Customer registered successfully'}), 201
    except DuplicateKeyError:
        return jsonify({'error': 'Email already exists'}), 400


@auth_routes.route('/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')

        if not email or not password:
            return jsonify({'error': 'Please provide all required fields'}), 400

        customer = db.customer.find_one({'email': email})

        if not customer:
            return jsonify({'error': 'Invalid username or password'}), 401

        if not check_password_hash(customer['password'], password):
            return jsonify({'error': 'Invalid username or password'}), 401

        current_time = datetime.datetime.now(datetime.timezone.utc)
        expiration_time = current_time + datetime.timedelta(minutes=60)

        token = jwt.encode({
            'email': email,
            'iat': current_time,
            'exp': expiration_time
        }, 'secret_key', algorithm='HS256')

        return jsonify({'token': token}), 200
    except Exception as e:
        print(f"Error during login: {str(e)}")
        return jsonify({'error': 'An error occurred during login'}), 500

@auth_routes.route('/logout', methods=['POST'])
def logout():
    return jsonify({'message': 'Customer logged out successfully'}), 200


@auth_routes.route('/user', methods=['GET'])
@token_required
def get_user(current_user):
    user_data = {
        'username': current_user['firstname'] + ' ' + current_user['lastname'],
        'email': current_user['email']
    }
    return jsonify(user_data), 200


@auth_routes.route('/forget-password', methods=['POST'])
def forget_password():
    data = request.get_json()
    email = data.get('email')
    new_password = data.get('newPassword')

    customer = db.customer.find_one({'email': email})

    if customer:
        hashed_password = generate_password_hash(new_password)
        db.customer.update_one({'email': email}, {'$set': {'password': hashed_password}})
        return jsonify({'message': 'Password reset successful'}), 200
    else:
        return jsonify({'message': 'Email not found'}), 404*****************
*****************
File name: run.py
Content:
import json
from bson.objectid import ObjectId
from pymongo import MongoClient
from gridfs import GridFS
from flask import Flask, jsonify, send_file, request, session
from io import BytesIO
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
CORS(app)

# Connect to MongoDB
client = MongoClient('localhost', 27017)
db = client['toy_store']
fs = GridFS(db)
product_collection = db['products']
customer_collection = db['customer']



class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)
    
    
@app.route('/api/products', methods=['GET'])
def get_products_by_category():
    category_id = request.args.get('category')
    if not category_id:
        return jsonify({"error": "Category ID is required"}), 400
    
    products = list(product_collection.find({'category': category_id}, {'_id': 1, 'name': 1, 'description': 1, 'price': 1, 'category': 1, 'age_range': 1, 'image_id': 1}))
    for product in products:
        product['_id'] = str(product['_id'])
        product['image'] = get_image_url(product['image_id'])
    return json.dumps(products, cls=JSONEncoder)


@app.route('/products', methods=['GET'])
def get_products():
    products = list(product_collection.find({}, {'_id': 1, 'name': 1, 'description': 1, 'price': 1, 'category': 1, 'age_range': 1, 'image_id': 1}))
    for product in products:
        product['_id'] = str(product['_id'])
        product['image'] = get_image_url(product['image_id'])
    return json.dumps(products, cls=JSONEncoder)

@app.route('/images/<image_id>', methods=['GET'])
def get_image(image_id):
    try:
        image_file = fs.get(ObjectId(image_id))
        print(f"Image file found: {image_file.filename}")
        print(f"Image file length: {image_file.length}")
        return send_file(
            BytesIO(image_file.read()),
            mimetype='image/jpeg',
            as_attachment=False
        )
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return jsonify({'error': f'Unexpected error: {str(e)}'}), 500

def get_image_url(image_id):
    return f'/images/{image_id}'

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data['email']

    if 'registration' in data:
        # Handle user registration
        customer_data = {
            "first_name": data['first_name'],
            "last_name": data['last_name'],
            "email": data['email'],
            "password": generate_password_hash(data['password'])
        }
        user = customer_collection.find_one({"email": email})
        if user:
            return jsonify({"error": "User with this email already exists"}), 400
        customer_collection.insert_one(customer_data)
        return jsonify({"message": "User registered successfully"}), 201

    elif 'login' in data:
        # Handle user login
        email = data['email']
        password = data['password']
        user = customer_collection.find_one({"email": email})
        if user and check_password_hash(user['password'], password):
            # Successful login
            return jsonify({"message": "Login successful"}), 200
        else:
            # Invalid credentials
            return jsonify({"error": "Invalid email or password"}), 401

    else:
        return jsonify({"error": "Invalid request"}), 400


@app.route('/customers', methods=['GET'])
def get_all_products():
    products = list(customer_collection.find({}, {'password': 0}))
    response = ""
    for product in products:
        response += json.dumps(product, cls=JSONEncoder) + "\n"
    return response

if __name__ == '__main__':
    app.run(debug=True)*****************
*****************
File name: store.py
Content:
import os
from bson.objectid import ObjectId
from pymongo import MongoClient
from gridfs import GridFS
import pandas as pd

# Connect to MongoDB
client = MongoClient('localhost', 27017)
db = client['toy_store']
fs = GridFS(db)
collection = db['products']

# Read the CSV file
df = pd.read_csv('products.csv')

# Iterate over the rows in the DataFrame and store the products
for _, row in df.iterrows():
    # Open the image file
    image_path = row['image_path']
    try:
        with open(image_path, 'rb') as image_file:
            # Store the image in GridFS
            image_id = fs.put(image_file.read(), filename=row['name'])
    except FileNotFoundError:
        print(f"Error: Could not find image file {image_path}")
        continue

    # Create the product document
    product = {
        'name': row['name'],
        'description': row['description'],
        'price': row['price'],
        'category': row['category'],
        'age_range': row['age_range'],
        'image_id': image_id,
        'stock': row['stock']
    }

    # Store the product in the 'products' collection
    collection.insert_one(product)

print("Products imported successfully!")*****************
