*****************
File name: AdminCategory.js
Content:
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { CiEdit } from 'react-icons/ci';
import { IoIosAddCircle } from 'react-icons/io';
import { TiTick } from 'react-icons/ti';
import { MdCancel } from 'react-icons/md';
import '../css/AdminCategory.css';

const AdminCategory = () => {
  const navigate = useNavigate();
  const [categories, setCategories] = useState([]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [categoryName, setCategoryName] = useState('');
  const [categoryImage, setCategoryImage] = useState(null);
  const [editCategoryId, setEditCategoryId] = useState(null);
  const [editCategoryName, setEditCategoryName] = useState('');
  const [editCategoryImage, setEditCategoryImage] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    const admin_token = localStorage.getItem('admin_token');
    if (!admin_token) {
      navigate('/admin/login');
    } else {
      fetchCategories();
    }
  }, [navigate]);

  const fetchCategories = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/admin/category/all', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      setCategories(response.data);
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  const handleAddCategory = () => {
    setShowAddForm(true);
    setCategoryName('');
    setCategoryImage(null);
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!categoryName || !categoryImage) {
      setError('Category name and image are required');
      return;
    }
    try {
      const formData = new FormData();
      formData.append('CategoryName', categoryName);
      formData.append('image', categoryImage);

      await axios.post('http://localhost:5000/api/admin/category/insert', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      setShowAddForm(false);
      setCategoryName('');
      setCategoryImage(null);
      setError('');
      fetchCategories();
    } catch (error) {
      console.error('Error creating category:', error);
      if (error.response && error.response.data && error.response.data.error) {
        setError(error.response.data.error);
      } else {
        setError('An error occurred while creating the category');
      }
    }
  };

  const handleEdit = (category) => {
    setEditCategoryId(category._id);
    setEditCategoryName(category.CategoryName);
    setEditCategoryImage(null);
  };

  const handleUpdate = async (e) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append('CategoryName', editCategoryName);
      if (editCategoryImage) {
        formData.append('image', editCategoryImage);
      }

      await axios.put(`http://localhost:5000/api/admin/category/edit/${editCategoryId}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      setEditCategoryId(null);
      setEditCategoryName('');
      setEditCategoryImage(null);
      fetchCategories();
    } catch (error) {
      console.error('Error updating category:', error);
    }
  };

  return (
    <div className="admin-category-container">
      <h2>Manage Categories</h2>
      <button className="admin-category-button" onClick={handleAddCategory}>
        <IoIosAddCircle /> Add New Category
      </button>
      {showAddForm && (
        <form onSubmit={handleSubmit} className="admin-category-form">
          <div className="admin-category-form-group">
            <label htmlFor="categoryName">Category Name:</label>
            <input
              type="text"
              id="categoryName"
              value={categoryName}
              onChange={(e) => setCategoryName(e.target.value)}
            />
          </div>
          <div className="admin-category-form-group">
            <label htmlFor="categoryImage">Category Image:</label>
            <input
              type="file"
              id="categoryImage"
              accept=".jpg,.jpeg,.png"
              onChange={(e) => setCategoryImage(e.target.files[0])}
            />
          </div>
          {error && <p className="admin-category-error-message">{error}</p>}
          <div className="admin-category-form-actions">
            <button type="submit" className="admin-category-button">
              <TiTick /> Submit
            </button>
            <button type="button" className="admin-category-button" onClick={() => setShowAddForm(false)}>
              <MdCancel /> Cancel
            </button>
          </div>
        </form>
      )}
      <div className="admin-category-table-container">
        <table className="admin-category-table">
          <thead>
            <tr>
              <th>Category Name</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {categories.map((category) => (
              <tr key={category._id}>
                <td>{category.CategoryName}</td>
                <td className="admin-category-actions">
                  {editCategoryId === category._id ? (
                    <form onSubmit={handleUpdate} className="admin-category-edit-form">
                      <input
                        type="text"
                        value={editCategoryName}
                        onChange={(e) => setEditCategoryName(e.target.value)}
                      />
                      <input
                        type="file"
                        accept=".jpg,.jpeg,.png"
                        onChange={(e) => setEditCategoryImage(e.target.files[0])}
                      />
                      <div className="admin-category-form-actions">
                        <button type="submit" className="admin-category-button">
                          <TiTick /> Save
                        </button>
                        <button type="button" className="admin-category-button" onClick={() => setEditCategoryId(null)}>
                          <MdCancel /> Cancel
                        </button>
                      </div>
                    </form>
                  ) : (
                    <button className="admin-category-button" onClick={() => handleEdit(category)}>
                      <CiEdit /> Edit
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminCategory;*****************
*****************
File name: AdminHandleOrders.js
Content:
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import '../css/AdminHandleOrders.css';
import { MdClose } from 'react-icons/md';

const AdminHandleOrders = () => {
  const navigate = useNavigate();
  const [orders, setOrders] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [activeTab, setActiveTab] = useState('Pending');
  const [editItem, setEditItem] = useState(null);

  useEffect(() => {
    const admin_token = localStorage.getItem('admin_token');
    if (!admin_token) {
      navigate('/admin/login');
    } else {
      fetchOrders();
    }
  }, [navigate]);

  const fetchOrders = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/admin/handleorders/all', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      setOrders(response.data);
    } catch (error) {
      console.error('Error fetching orders:', error);
    }
  };

  const handleOrderClick = async (orderId) => {
    if (selectedOrder && selectedOrder._id === orderId) {
      setSelectedOrder(null);
    } else {
      try {
        const response = await axios.get(`http://localhost:5000/api/admin/handleorders/${orderId}`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
          },
        });
        setSelectedOrder(response.data);
      } catch (error) {
        console.error('Error fetching order details:', error);
      }
    }
  };

  const handleUpdateOrder = async (itemId, field, value) => {
    const updatedOrder = { ...selectedOrder };
    const itemIndex = updatedOrder.items.findIndex((item) => item.product_id === itemId);
    if (itemIndex !== -1) {
      updatedOrder.items[itemIndex][field] = value;
      setSelectedOrder(updatedOrder);
    }
    setEditItem({ itemId, field, value });
  };

  const saveUpdate = async (itemId) => {
    try {
      await axios.put(
        `http://localhost:5000/api/admin/handleorders/update/${selectedOrder._id}`,
        { itemId, field: editItem.field, value: editItem.value },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
          },
        }
      );
      setEditItem(null);
      toast.success('Order updated successfully');
      fetchOrders();
      window.location.reload(); // Refresh the page
    } catch (error) {
      console.error('Error updating order:', error);
      toast.error('Failed to update order');
    }
  };

  const filteredOrders = orders.reduce((acc, order) => {
    if (!order.items) {
      return acc;
    }

    const pendingItems = order.items.filter((item) => item.deliveryStatus === 'Pending');
    const transitItems = order.items.filter((item) => item.deliveryStatus === 'Transit');
    const cancelledItems = order.items.filter((item) => item.deliveryStatus === 'Cancelled');
    const deliveredItems = order.items.filter((item) => item.deliveryStatus === 'Delivered');

    if (pendingItems.length > 0) {
      acc.Pending.push(order);
    }
    if (transitItems.length > 0) {
      acc.Transit.push(order);
    }
    if (cancelledItems.length > 0) {
      acc.Cancelled.push(order);
    }
    if (deliveredItems.length === order.items.length) {
      acc.Delivered.push(order);
    }

    return acc;
  }, { Pending: [], Transit: [], Cancelled: [], Delivered: [] });

  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setSelectedOrder(null); // Close the displayed order details when changing tabs
  };

  return (
    <div className="admin-handle-orders-container">
      <h2>Manage Orders</h2>
      <div className="admin-handle-orders-tabs">
        <button
          className={`admin-handle-orders-tab ${activeTab === 'Pending' ? 'active' : ''}`}
          onClick={() => handleTabChange('Pending')}
        >
          Pending Orders ({filteredOrders.Pending.length})
        </button>
        <button
          className={`admin-handle-orders-tab ${activeTab === 'Transit' ? 'active' : ''}`}
          onClick={() => handleTabChange('Transit')}
        >
          Transit Orders ({filteredOrders.Transit.length})
        </button>
        <button
          className={`admin-handle-orders-tab ${activeTab === 'Cancelled' ? 'active' : ''}`}
          onClick={() => handleTabChange('Cancelled')}
        >
          Cancelled Orders ({filteredOrders.Cancelled.length})
        </button>
        <button
          className={`admin-handle-orders-tab ${activeTab === 'Delivered' ? 'active' : ''}`}
          onClick={() => handleTabChange('Delivered')}
        >
          Delivered Orders ({filteredOrders.Delivered.length})
        </button>
      </div>
      <div className="admin-handle-orders-table-container">
        {filteredOrders[activeTab].length === 0 ? (
          <p>No orders found for the selected tab.</p>
        ) : (
          <table className="admin-handle-orders-table">
            <thead>
              <tr>
                <th>Order ID</th>
                <th>Customer Name</th>
                <th>Total Cost</th>
                <th>Order Time</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredOrders[activeTab].map((order) => (
                <tr key={order._id}>
                  <td>{order._id}</td>
                  <td>{order.customerName}</td>
                  <td>{order.Totalcost.toFixed(2)}</td>
                  <td>{new Date(order.orderTime).toLocaleString()}</td>
                  <td>
                    <button
                      className="admin-handle-orders-button"
                      onClick={() => handleOrderClick(order._id)}
                    >
                      {selectedOrder && selectedOrder._id === order._id ? 'Hide Details' : 'View Details'}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
      {selectedOrder && (
        <div className="admin-handle-orders-details">
          <div className="admin-handle-orders-details-header">
            <h3>Order Details</h3>
            <MdClose
              className="admin-handle-orders-close-icon"
              onClick={() => setSelectedOrder(null)}
            />
          </div>
          <p><strong>Order ID:</strong> {selectedOrder._id}</p>
          <p><strong>Total Cost:</strong> {selectedOrder.Totalcost.toFixed(2)}</p>
          <p><strong>Tax:</strong> {selectedOrder.tax.toFixed(2)}</p>
          <p><strong>Discount:</strong> {selectedOrder.discount.toFixed(2)}</p>
          <p><strong>Payment ID:</strong> {selectedOrder.paymentId}</p>
          <p><strong>Phone Number:</strong> {selectedOrder.phoneNumber}</p>
          <p>
            <strong>Address:</strong> {selectedOrder.address.address_line_1}, {selectedOrder.address.address_line_2},{' '}
            {selectedOrder.address.city}, {selectedOrder.address.state}, {selectedOrder.address.zipcode}
          </p>
          <p><strong>Order Time:</strong> {new Date(selectedOrder.orderTime).toLocaleString()}</p>
          <h4>Order Items</h4>
          <table className="admin-handle-orders-items-table">
            <thead>
              <tr>
                <th>S.No</th>
                <th>Product</th>
                <th>Quantity</th>
                <th>Delivery Status</th>
                <th>Estimated Delivery Date</th>
                <th>Delivery Date</th>
                <th>Cost</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {selectedOrder.items
                .filter((item) => item.deliveryStatus === activeTab)
                .map((item, index) => (
                  <tr key={item.product_id}>
                    <td>{index + 1}</td>
                    <td>
                      <span>{item.name}</span>
                    </td>
                    <td>{item.quantity}</td>
                    <td>
                      <select
                        value={item.deliveryStatus}
                        onChange={(e) => handleUpdateOrder(item.product_id, 'deliveryStatus', e.target.value)}
                      >
                        <option value="Pending">Pending</option>
                        <option value="Transit">Transit</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Cancelled">Cancelled</option>
                      </select>
                    </td>
                    <td>
                      <input
                        type="date"
                        value={item.EstimatedDeliveryDate}
                        onChange={(e) => handleUpdateOrder(item.product_id, 'EstimatedDeliveryDate', e.target.value)}
                      />
                    </td>
                    <td>
                      <input
                        type="date"
                        value={item.DeliveryDate}
                        onChange={(e) => handleUpdateOrder(item.product_id, 'DeliveryDate', e.target.value)}
                      />
                    </td>
                    <td>{item.Cost.toFixed(2)}</td>
                    <td>
                      {editItem && editItem.itemId === item.product_id ? (
                        <button className="admin-handle-orders-button" onClick={() => saveUpdate(item.product_id)}>
                          Save
                        </button>
                      ) : null}
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default AdminHandleOrders;*****************
*****************
File name: AdminHome.js
Content:
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { CiEdit } from "react-icons/ci";
import { MdDelete } from "react-icons/md";
import { IoIosAddCircle } from "react-icons/io";
import { TiTick } from "react-icons/ti";
import { MdCancel } from "react-icons/md";
import '../css/AdminHome.css';

const AdminHome = () => {
  const navigate = useNavigate();
  const [utilityData, setUtilityData] = useState(null);
  const [toyData, setToyData] = useState(null);
  const [taxRate, setTaxRate] = useState('');
  const [deliveryCharge, setDeliveryCharge] = useState('');
  const [couponCode, setCouponCode] = useState('');
  const [couponDiscount, setCouponDiscount] = useState('');
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    const admin_token = localStorage.getItem('admin_token');
    if (!admin_token) {
      navigate('/admin/login');
    } else {
      fetchUtilityData(admin_token);
      fetchToyData(admin_token);
    }
  }, [navigate]);

  const fetchUtilityData = async (admin_token) => {
    try {
      const response = await axios.get('http://localhost:5000/api/admin/utility', {
        headers: {
          Authorization: `Bearer ${admin_token}`,
        },
      });
      setUtilityData(response.data);
      setTaxRate(response.data.taxrate);
      setDeliveryCharge(response.data.deliverycharge);
    } catch (error) {
      console.error('Error fetching utility data:', error);
    }
  };

  const fetchToyData = async (admin_token) => {
    try {
      const response = await axios.get('http://localhost:5000/api/admin/toys', {
        headers: {
          Authorization: `Bearer ${admin_token}`,
        },
      });
      setToyData(response.data);
    } catch (error) {
      console.error('Error fetching toy data:', error);
    }
  };


  const handleSaveUtility = async () => {
    const admin_token = localStorage.getItem('admin_token');
    try {
      await axios.put('http://localhost:5000/api/admin/utility', {
        taxrate: taxRate,
        deliverycharge: deliveryCharge,
      }, {
        headers: {
          Authorization: `Bearer ${admin_token}`,
        },
      });
      setIsEditing(false);
      alert('Utility data updated successfully');
    } catch (error) {
      console.error('Error updating utility data:', error);
    }
  };

  const handleAddCoupon = async () => {
    const admin_token = localStorage.getItem('admin_token');
    try {
      await axios.post('http://localhost:5000/api/admin/coupons', {
        code: couponCode,
        discount: couponDiscount,
      }, {
        headers: {
          Authorization: `Bearer ${admin_token}`,
        },
      });
      alert('Coupon added successfully');
      setCouponCode('');
      setCouponDiscount('');
      fetchUtilityData(admin_token);
    } catch (error) {
      console.error('Error adding coupon:', error);
    }
  };

  const handleDeleteCoupon = async (code) => {
    const admin_token = localStorage.getItem('admin_token');
    try {
      await axios.delete(`http://localhost:5000/api/admin/coupons/${code}`, {
        headers: {
          Authorization: `Bearer ${admin_token}`,
        },
      });
      alert('Coupon deleted successfully');
      fetchUtilityData(admin_token);
    } catch (error) {
      console.error('Error deleting coupon:', error);
    }
  };

  return (
    <div className="admin-home-container">
      <div className="admin-home-left-section">
        <div className="admin-home-utility-charges">
          <h2>Charges / Coupons</h2>
          {utilityData ? (
            <div>
              <div className="admin-home-utility-item">
                <span>Tax Rate: {taxRate}</span>
                {isEditing ? (
                  <input
                    type="number"
                    step="0.01"
                    value={taxRate}
                    onChange={(e) => setTaxRate(e.target.value)}
                  />
                ) : (
                  <CiEdit onClick={() => setIsEditing(true)} />
                )}
              </div>
              <div className="admin-home-utility-item">
                <span>Delivery Charge: {deliveryCharge}</span>
                {isEditing ? (
                  <input
                    type="number"
                    step="0.01"
                    value={deliveryCharge}
                    onChange={(e) => setDeliveryCharge(e.target.value)}
                  />
                ) : (
                  <CiEdit onClick={() => setIsEditing(true)} />
                )}
              </div>
              {isEditing && (
                <div className="admin-home-utility-actions">
                  <TiTick onClick={handleSaveUtility} />
                  <MdCancel onClick={() => setIsEditing(false)} />
                </div>
              )}
              <h3>Coupons:</h3>
              <div className="admin-home-coupon-form">
                <input
                  type="text"
                  placeholder="Coupon Code"
                  value={couponCode}
                  onChange={(e) => setCouponCode(e.target.value)}
                />
                <input
                  type="text"
                  placeholder="Coupon Discount"
                  value={couponDiscount}
                  onChange={(e) => setCouponDiscount(e.target.value)}
                />
                <IoIosAddCircle onClick={handleAddCoupon} />
              </div>
              <ul className="admin-home-coupon-list">
                {utilityData.coupons.map((coupon, index) => (
                  <li key={index}>
                    <span>Code: {coupon.code}, Discount: {coupon.discount}</span>
                    <MdDelete onClick={() => handleDeleteCoupon(coupon.code)} />
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <p>Loading utility data...</p>
          )}
        </div>
      </div>
      <div className="admin-home-right-section">
        <div className="admin-home-toy-info">
          <h2>Toys Information</h2>
          {toyData ? (
            <div>
              <p>Total Stock of Toys: {toyData.totalToys}</p>
              <p>Out of Stock Toys: {toyData.outOfStockToys}</p>
              <h3>Categories:</h3>
              <table className="admin-home-table">
                <thead>
                  <tr>
                    <th>Category</th>
                    <th>Total Stock</th>
                  </tr>
                </thead>
                <tbody>
                  {toyData.categories.map((category, index) => (
                    <tr key={index}>
                      <td>{category.CategoryName}</td>
                      <td>{category.totalToys}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p>Loading toy data...</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default AdminHome;*****************
*****************
File name: AdminLogin.js
Content:
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import '../css/AdminLogin.css';

const AdminLogin = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState({ text: '', type: '' });
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/api/admin/login', {
        email,
        password,
      });
      localStorage.setItem('admin_token', response.data.admin_token);
      console.log(response.data.admin_token);
      setMessage({ text: 'Login successful', type: 'success' });
      setTimeout(() => {
        navigate('/admin/home');
      }, 2000);
    } catch (error) {
      setMessage({ text: error.response.data.message, type: 'error' });
    }
  };

  return (
    <div className="admin-password-container-admin">
      <h2 className="admin-password-title-admin">Admin Login</h2>
      <form onSubmit={handleLogin} className="admin-password-form-admin">
        <div className="form-group-admin">
          <label htmlFor="email" className="form-label-admin">Email:</label>
          <input
            type="email"
            id="email"
            name="email"
            placeholder="Enter your email"
            className="form-input-admin"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="form-group-admin">
          <label htmlFor="password" className="form-label-admin">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            placeholder="Enter your password"
            className="form-input-admin"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="form-button-admin">Login</button>
        {message.text && (
          <div className={`message-admin ${message.type}`}>{message.text}</div>
        )}
      </form>
    </div>
  );
};

export default AdminLogin;*****************
*****************
File name: AdminNavbar.js
Content:
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import '../css/Navbar.css';
import ToyLogo from '../toy_images/toy-land-logo1.png';

const AdminNavbar = () => {
  const navigate = useNavigate();
  const admin_token = localStorage.getItem('admin_token');

  const handleLogout = () => {
    localStorage.removeItem('admin_token');
    navigate('/admin/home');
  };

  return (
    <nav className="navbar">
      <Link to="/admin/home">
        <img src={ToyLogo} alt="Company Logo" />
      </Link>
      <ul>
        {admin_token ? (
          <>
            <li>
              <Link to="/admin/categories">Categories</Link>
            </li>
            <li>
              <Link to="/admin/products">Products</Link>
            </li>
            <li>
              <Link to="/admin/orders">Orders</Link>
            </li>
            <li>
              <a href="/admin/login" onClick={handleLogout}>
                SignOut
              </a> 
            </li>
          </>
        ) : (
          <li>
            <Link to="/admin/login">SignIn</Link>
          </li>
        )}
      </ul>
    </nav>
  );
};

export default AdminNavbar;*****************
*****************
File name: AdminProducts.js
Content:
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { IoIosAddCircle } from 'react-icons/io';
import { TiTick } from 'react-icons/ti';
import { MdCancel } from 'react-icons/md';
import '../css/AdminProduct.css';

const AdminProduct = () => {
  const navigate = useNavigate();
  const [categories, setCategories] = useState([]);
  const [expandedCategory, setExpandedCategory] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [price, setPrice] = useState('');
  const [unit, setUnit] = useState('Piece');
  const [category, setCategory] = useState('');
  const [ageRange, setAgeRange] = useState('');
  const [image, setImage] = useState(null);
  const [stock, setStock] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    const admin_token = localStorage.getItem('admin_token');
    if (!admin_token) {
      navigate('/admin/login');
    } else {
      fetchCategories();
    }
  }, [navigate]);

  const fetchCategories = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/admin/category/all', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      setCategories(response.data);
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  const handleCategoryClick = (categoryId) => {
    if (expandedCategory === categoryId) {
      setExpandedCategory(null);
    } else {
      setExpandedCategory(categoryId);
    }
  };

  const handleProductClick = (productId) => {
    navigate(`/admin/product/${productId}`);
  };

  const handleAddProduct = () => {
    setShowAddForm(true);
    setName('');
    setDescription('');
    setPrice('');
    setUnit('Piece');
    setCategory('');
    setAgeRange('');
    setImage(null);
    setStock('');
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append('name', name);
      formData.append('description', description);
      formData.append('price', price);
      formData.append('unit', unit);
      formData.append('category', category);
      formData.append('age_range', ageRange);
      if (image) {
        formData.append('image', image);
      }
      formData.append('stock', stock);

      await axios.post('http://localhost:5000/api/admin/product/insert', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      setShowAddForm(false);
      fetchCategories();
    } catch (error) {
      console.error('Error adding product:', error);
      setError('An error occurred while adding the product');
    }
  };

  return (
    <div className="admin-product-container">
      <h2>Manage Products</h2>
      <button className="admin-product-container-button" onClick={handleAddProduct}>
        <IoIosAddCircle /> Add New Product
      </button>
      {error && <p className="admin-product-error-message">{error}</p>}
      {showAddForm && (
        <form onSubmit={handleSubmit} className="admin-product-view-form">
          <div className="admin-product-form-group">
            <label htmlFor="name">Name:</label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
          </div>
          <div className="admin-product-form-group">
            <label htmlFor="description">Description:</label>
            <textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            ></textarea>
          </div>
          <div className="admin-product-form-group">
            <label htmlFor="price">Price:</label>
            <input
              type="number"
              id="price"
              step="0.01"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
            />
          </div>
          <div className="admin-product-form-group">
            <label htmlFor="unit">Unit:</label>
            <select
              id="unit"
              value={unit}
              onChange={(e) => setUnit(e.target.value)}
            >
              <option value="Piece">Piece</option>
              <option value="Dozen">Dozen</option>
              <option value="Box">Box</option>
            </select>
          </div>
          <div className="admin-product-form-group">
            <label htmlFor="category">Category:</label>
            <select
              id="category"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
            >
              <option value="">Select a category</option>
              {categories.map((cat) => (
                <option key={cat._id} value={cat.link}>
                  {cat.CategoryName}
                </option>
              ))}
            </select>
          </div>
          <div className="admin-product-form-group">
            <label htmlFor="ageRange">Age Range:</label>
            <input
              type="text"
              id="ageRange"
              value={ageRange}
              onChange={(e) => setAgeRange(e.target.value)}
            />
          </div>
          <div className="admin-product-form-group">
            <label htmlFor="image">Image:</label>
            <input
              type="file"
              id="image"
              accept=".jpg,.jpeg,.png"
              onChange={(e) => setImage(e.target.files[0])}
            />
          </div>
          <div className="admin-product-form-group">
            <label htmlFor="stock">Stock:</label>
            <input
              type="number"
              id="stock"
              value={stock}
              onChange={(e) => setStock(e.target.value)}
            />
          </div>
          <div className="admin-product-form-actions">
            <button className="admin-product-container-button" type="submit">
              <TiTick /> Add Product
            </button>
            <button className="admin-product-container-button" type="button" onClick={() => setShowAddForm(false)}>
              <MdCancel /> Cancel
            </button>
          </div>
        </form>
      )}
      <div className="admin-product-category-list">
        {categories.map((category) => (
          <div key={category._id} className="admin-product-category-item">
            <div
              className="admin-product-category-header"
              onClick={() => handleCategoryClick(category._id)}
            >
              <h3>{category.CategoryName}</h3>
              <span>{expandedCategory === category._id ? '-' : '+'}</span>
            </div>
            {expandedCategory === category._id && (
              <div className="admin-product-list">
                {category.products.map((product, index) => (
                  <div
                    key={product._id}
                    className="admin-product-item"
                    onClick={() => handleProductClick(product._id)}
                  >
                    <span className="admin-product-number">{index + 1}.</span>
                    <p>{product.name}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default AdminProduct;*****************
*****************
File name: AdminProductView.js
Content:
import React, { useCallback, useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
import { TiTick } from 'react-icons/ti';
import { MdCancel } from 'react-icons/md';
import '../css/AdminProductView.css';

const AdminProductView = () => {
  const navigate = useNavigate();
  const { productId } = useParams();
  const [product, setProduct] = useState(null);
  const [categories, setCategories] = useState([]);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [price, setPrice] = useState('');
  const [unit, setUnit] = useState('Piece');
  const [category, setCategory] = useState('');
  const [ageRange, setAgeRange] = useState('');
  const [image, setImage] = useState(null);
  const [stock, setStock] = useState('');
  const [error, setError] = useState('');

  const fetchProduct = useCallback(async () => {
    try {
      const response = await axios.get(`http://localhost:5000/api/admin/product/${productId}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      const productData = response.data;
      setProduct(productData);
      setName(productData.name);
      setDescription(productData.description);
      setPrice(productData.price);
      setCategory(productData.category);
      setAgeRange(productData.age_range);
      setStock(productData.stock);
      setUnit('Piece');
    } catch (error) {
      console.error('Error fetching product:', error);
    }
  }, [productId]);

  const fetchCategories = useCallback(async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/admin/category/all', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      setCategories(response.data);
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  }, []);

  useEffect(() => {
    const admin_token = localStorage.getItem('admin_token');
    if (!admin_token) {
      navigate('/admin/login');
    } else {
      fetchProduct();
      fetchCategories();
    }
  }, [navigate, productId, fetchProduct, fetchCategories]);

  const handleSave = async (e) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append('name', name);
      formData.append('description', description);
      formData.append('price', price);
      formData.append('unit', unit);
      formData.append('category', category);
      formData.append('age_range', ageRange);
      if (image) {
        formData.append('image', image);
      }
      formData.append('stock', stock);

      await axios.put(`http://localhost:5000/api/admin/product/edit/${productId}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
        },
      });
      navigate('/admin/products');
    } catch (error) {
      console.error('Error updating product:', error);
      setError('An error occurred while updating the product');
    }
  };

  const handleDelete = async () => {
    const confirmDelete = window.confirm('Are you sure you want to delete this product?');
    if (confirmDelete) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/product/delete/${productId}`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
          },
        });
        navigate('/admin/products');
      } catch (error) {
        console.error('Error deleting product:', error);
        setError('An error occurred while deleting the product');
      }
    }
  };

  if (!product) {
    return <div>Loading...</div>;
  }

  return (
    <div className="admin-product-view-container">
      <h2>Product Details</h2>
      {error && <p className="admin-product-view-error-message">{error}</p>}
      <form onSubmit={handleSave} className="admin-product-view-form">
        <div className="admin-product-view-form-group">
          <label htmlFor="name">Name:</label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
        </div>
        <div className="admin-product-view-form-group">
          <label htmlFor="description">Description:</label>
          <textarea
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          ></textarea>
        </div>
        <div className="admin-product-view-form-group">
          <label htmlFor="price">Price:</label>
          <input
            type="number"
            id="price"
            step="0.01"
            value={price}
            onChange={(e) => setPrice(e.target.value)}
          />
        </div>
        <div className="admin-product-view-form-group">
            <label htmlFor="unit">Unit:</label>
            <select
              id="unit"
              value={unit}
              onChange={(e) => setUnit(e.target.value)}
            >
              <option value="Piece">Piece</option>
              <option value="Dozen">Dozen</option>
              <option value="Box">Box</option>
            </select>
          </div>
        <div className="admin-product-view-form-group">
          <label htmlFor="category">Category:</label>
          <select
            id="category"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
          >
            <option value="">Select a category</option>
            {categories.map((cat) => (
              <option key={cat._id} value={cat.link}>
                {cat.CategoryName}
              </option>
            ))}
          </select>
        </div>
        <div className="admin-product-view-form-group">
          <label htmlFor="ageRange">Age Range:</label>
          <input
            type="text"
            id="ageRange"
            value={ageRange}
            onChange={(e) => setAgeRange(e.target.value)}
          />
        </div>
        <div className="admin-product-view-form-group">
          <label htmlFor="image">Image:</label>
          <input
            type="file"
            id="image"
            accept=".jpg,.jpeg,.png"
            onChange={(e) => setImage(e.target.files[0])}
          />
        </div>
        <div className="admin-product-view-form-group">
          <label htmlFor="stock">Stock:</label>
          <input
            type="number"
            id="stock"
            value={stock}
            onChange={(e) => setStock(e.target.value)}
          />
        </div>
        <div className="admin-product-view-form-actions">
          <button type="submit">
            <TiTick /> Save
          </button>
          <button type="button" onClick={handleDelete}>
            <MdCancel /> Delete
          </button>
        </div>
      </form>
    </div>
  );
};

export default AdminProductView;*****************
*****************
File name: Cart.js
Content:
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../css/Cart.css';

const CartPage = () => {
  const [cartItems, setCartItems] = useState([]);
  const navigate = useNavigate();

  const fetchCartItems = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }
      const response = await axios.get('http://localhost:5000/api/cart/all', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setCartItems(response.data);
    } catch (error) {
      console.error('Error fetching cart items:', error);
    }
  }, [navigate]);

  useEffect(() => {
    fetchCartItems();
  }, [fetchCartItems]);

  const handleCheckout = () => {
    navigate('/checkout', { state: { selectedItems: cartItems } });
  };

  const handleDelete = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }
      await axios.delete('http://localhost:5000/api/cart/delete', {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });
      setCartItems([]);
    } catch (error) {
      console.error('Error deleting items from cart:', error);
    }
  };

  const calculateTotal = () => {
    let total = 0;
    cartItems.forEach((item) => {
      total += item.price * item.quantity;
    });
    return total.toFixed(2);
  };

  return (
    <div className="cart-page">
      <h2>Items in Cart</h2>
      {cartItems.length === 0 ? (
        <p className="empty-cart">Your cart is empty.</p>
      ) : (
        <div className="cart-items">
          {cartItems.map((item) => (
            <div key={item._id} className="cart-item">
              <div className="cart-item-image">
                <img
                  src={`http://localhost:5000/api/products/images/${item.image_id}`}
                  alt={item.name}
                />
              </div>
              <div className="cart-item-details">
                <div className="cart-item-name">{item.name}</div>
                <div className="cart-item-price">Price: ${item.price}</div>
                <div className="cart-item-quantity">Quantity: {item.quantity}</div>
              </div>
            </div>
          ))}
          <div className="cart-total">
            <div className="total-amount">
              <span>Total Amount: ${calculateTotal()}</span>
            </div>
            <div className="cart-actions">
              <button className="delete-button" onClick={handleDelete}>
                Delete All
              </button>
              <button className="checkout-button" onClick={handleCheckout}>
                Checkout
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CartPage;*****************
*****************
File name: Categories.js
Content:
import React, { useState, useEffect } from 'react';
import { Container, Col, Image } from 'react-bootstrap';
import axios from 'axios';
import '../css/Category.css';

const Categories = () => {
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/categories/all');
        setCategories(response.data);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  return (
    <Container className="container">
      {categories.map((category) => (
        <Col key={category._id} className="category-item">
          <a href={`/category/${category.link}`}>
            <Image src={`http://localhost:5000/api/categories/images/${category.image_id}`} className="category-image" />
            <div>{category.CategoryName}</div>
          </a>
        </Col>
      ))}
    </Container>
  );
};

export default Categories;*****************
*****************
File name: CategoryProducts.js
Content:
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card } from 'react-bootstrap';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../css/CategoryProducts.css';

const CategoryProducts = () => {
  const { categoryId } = useParams();
  const [products, setProducts] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/api/products/category?category=${categoryId}`);
        setProducts(response.data);
        console.log(response.data[0].stock);
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };
    fetchProducts();
  }, [categoryId]);

  const handleProductClick = (product) => {
    navigate(`/view-individual-product/${product._id}`, { state: { product } });
  };

  return (
    <Container>
      <Row className="product-row">
        {products.map((product) => (
          <Col key={product._id} md={6} lg={4} xl={3}>
            <Card className="product-card">
              <Card.Img
                variant="top"
                src={`http://localhost:5000/api/products/images/${product.image_id}`}
                className="product-img"
              />
              <Card.Body>
                <Card.Title>
                  <a
                    href="#"
                    className={`name-link ${product.stock === 0 ? 'disabled-link' : ''}`}
                    onClick={(e) => {
                      e.preventDefault();
                      if (product.stock !== 0) {
                        handleProductClick(product);
                      }
                    }}
                  >
                    {product.name}
                  </a>
                </Card.Title>
                <Card.Text className="card-price">
                  Price: ${product.price}
                </Card.Text>
                <Card.Text className={`card-stock ${product.stock === 0 ? 'out-of-stock' : ''}`}>
                  {product.stock === 0 ? 'Out of Stock' : `Stock: ${product.stock}`}
                </Card.Text>
              </Card.Body>
            </Card>
          </Col>
        ))}
      </Row>
    </Container>
  );
};

export default CategoryProducts;*****************
*****************
File name: Checkout.js
Content:
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../css/Checkout.css';

const Checkout = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [addresses, setAddresses] = useState([]);
  const [useExistingAddress, setUseExistingAddress] = useState(true);
  const [selectedAddress, setSelectedAddress] = useState('');
  const [newAddress, setNewAddress] = useState({
    address_line_1: '',
    address_line_2: '',
    city: '',
    state: '',
    zipcode: '',
  });
  const [phoneNumber, setPhoneNumber] = useState('');
  const [useExistingNumber, setUseExistingNumber] = useState(true);
  const [newPhoneNumber, setNewPhoneNumber] = useState('');
  const [taxRate, setTaxRate] = useState(0);
  const [deliveryCharge, setDeliveryCharge] = useState(0);
  const [couponCode, setCouponCode] = useState('');
  const [discount, setDiscount] = useState(0);
  const [couponError, setCouponError] = useState('');
  const [phoneNumberError, setPhoneNumberError] = useState('');

  useEffect(() => {
    const fetchUserInfo = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          navigate('/login');
          return;
        }
        const response = await axios.get('http://localhost:5000/api/profile/get', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setAddresses(response.data.addresses);
        setPhoneNumber(response.data.phone_number);
      } catch (error) {
        console.error('Error fetching user info:', error);
      }
    };

    const fetchOrderUtilityDetails = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          navigate('/login');
          return;
        }
        const response = await axios.get('http://localhost:5000/api/admin_order_utility_details/get-order-utility-details', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setTaxRate(response.data.taxRate);
        setDeliveryCharge(response.data.deliveryCharge);
      } catch (error) {
        console.error('Error fetching order utility details:', error);
      }
    };

    fetchUserInfo();
    fetchOrderUtilityDetails();
  }, [navigate]);

  const handleAddressChange = (e) => {
    setSelectedAddress(e.target.value);
  };

  const handleNewAddressChange = (e) => {
    setNewAddress({ ...newAddress, [e.target.name]: e.target.value });
  };

  const handleCouponCodeChange = (e) => {
    setCouponCode(e.target.value);
  };

  const validateCouponCode = async () => {
    try {
      const response = await axios.post('http://localhost:5000/api/admin_order_utility_details/validate', {
        couponCode,
      });
      const { isValid, discountPercentage } = response.data;
      if (isValid) {
        setDiscount(discountPercentage);
        setCouponError('');
      } else {
        setDiscount(0);
        setCouponError('Invalid coupon code');
      }
    } catch (error) {
      console.error('Error validating coupon code:', error);
      setCouponError('Error validating coupon code');
    }
  };

  const handleProceedToPayment = async () => {
    if (!useExistingAddress && !newAddress.address_line_1) {
      alert('Please enter a delivery address');
      return;
    }

    if (!useExistingNumber && !newPhoneNumber) {
      setPhoneNumberError('Please enter a phone number');
      return;
    }

    let selectedAddressData;
    if (useExistingAddress) {
      selectedAddressData = addresses[selectedAddress];
    } else {
      selectedAddressData = newAddress;
    }

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }

      let updatedPhoneNumber = phoneNumber;
      if (!useExistingNumber) {
        updatedPhoneNumber = newPhoneNumber;
        await axios.put(
          'http://localhost:5000/api/profile/update',
          { phone_number: updatedPhoneNumber },
          {
            headers: {
              'Content-Type': 'application/json',
              Authorization: `Bearer ${token}`,
            },
          }
        );
      }

      // Calculate subtotal
      const subtotal = selectedItems.reduce((total, item) => total + item.price * item.quantity, 0);

      // Calculate tax
      const tax = subtotal * taxRate;

      // Calculate discount amount
      const discountAmount = subtotal * (discount / 100);

      // Calculate total cost
      const totalCost = subtotal + tax + deliveryCharge - discountAmount;

      // Proceed to payment with selected items, phone number, address, and total cost
      navigate('/payment', {
        state: {
          selectedItems,
          phoneNumber: updatedPhoneNumber,
          address: selectedAddressData,
          subtotal,
          tax,
          deliveryCharge,
          discount: discountAmount,
          totalCost,
        },
      });
    } catch (error) {
      console.error('Error updating phone number:', error);
    }
  };

  const selectedItems = location.state?.selectedItems || [];

  return (
    <div className="checkout-container">
      <h2>Checkout</h2>
      <div className="selected-items">
        <h3>Selected Items</h3>
        {selectedItems.map((item) => (
          <div key={item._id} className="selected-item">
            <div className="item-name">{item.name}</div>
            <div className="item-price">Price: ${item.price}</div>
            <div className="item-quantity">Quantity: {item.quantity}</div>
          </div>
        ))}
      </div>
      <div className="delivery-address">
        <h3>Delivery Address</h3>
        <div className="address-options">
          <label className="address-option">
            <input
              type="radio"
              value="existing"
              checked={useExistingAddress}
              onChange={() => setUseExistingAddress(true)}
            />
            <span className="checkmark"></span>
            <span className="label-text">Use existing address</span>
          </label>
          {addresses.length === 0 ? (
            <div className="no-address">
              <p>No address found. Please add an address in your profile.</p>
              <button onClick={() => navigate('/profile')}>Go to Profile</button>
            </div>
          ) : (
            <select value={selectedAddress} onChange={handleAddressChange}>
              <option value="">Select an address</option>
              {addresses.map((address, index) => (
                <option key={index} value={index}>
                  {`${address.address_line_1}, ${address.address_line_2}, ${address.city}, ${address.state}, ${address.zipcode}`}
                </option>
              ))}
            </select>
          )}
          <label className="address-option">
            <input
              type="radio"
              value="new"
              checked={!useExistingAddress}
              onChange={() => setUseExistingAddress(false)}
            />
            <span className="checkmark"></span>
            <span className="label-text">Use new address</span>
          </label>
          {!useExistingAddress && (
            <div className="new-address-inputs">
              <input
                type="text"
                name="address_line_1"
                placeholder="Address Line 1"
                value={newAddress.address_line_1}
                onChange={handleNewAddressChange}
                required
              />
              <input
                type="text"
                name="address_line_2"
                placeholder="Address Line 2"
                value={newAddress.address_line_2}
                onChange={handleNewAddressChange}
              />
              <input
                type="text"
                name="city"
                placeholder="City"
                value={newAddress.city}
                onChange={handleNewAddressChange}
                required
              />
              <input
                type="text"
                name="state"
                placeholder="State"
                value={newAddress.state}
                onChange={handleNewAddressChange}
                required
              />
              <input
                type="text"
                name="zipcode"
                placeholder="Zipcode"
                value={newAddress.zipcode}
                onChange={handleNewAddressChange}
                required
              />
            </div>
          )}
        </div>
      </div>
      <div className="phone-number">
        <h3>Phone Number</h3>
        <div className="phone-number-options">
          <label className="phone-number-option">
            <input
              type="radio"
              value="existing"
              checked={useExistingNumber}
              onChange={() => setUseExistingNumber(true)}
            />
            <span className="checkmark"></span>
            <span className="label-text">Use existing number</span>
          </label>
          {phoneNumber ? (
            <p className="existing-number">{phoneNumber}</p>
          ) : (
            <p className="no-number">
              No phone number found. Please add a phone number in your profile.
            </p>
          )}
          <label className="phone-number-option">
            <input
              type="radio"
              value="new"
              checked={!useExistingNumber}
              onChange={() => setUseExistingNumber(false)}
            />
            <span className="checkmark"></span>
            <span className="label-text">Use new number</span>
          </label>
          {!useExistingNumber && (
            <input
              type="text"
              className="new-number-input"
              placeholder="Enter new phone number"
              value={newPhoneNumber}
              onChange={(e) => {
                setNewPhoneNumber(e.target.value);
                setPhoneNumberError('');
              }}
              required
            />
          )}
          {phoneNumberError && <p className="phone-number-error">{phoneNumberError}</p>}
        </div>
      </div>
      <div className="coupon-code">
        <h3>Coupon Code</h3>
        <div className="coupon-input-container">
          <input
            type="text"
            placeholder="Enter coupon code"
            value={couponCode}
            onChange={handleCouponCodeChange}
          />
          <button onClick={validateCouponCode}>Apply</button>
        </div>
        {couponError && <p className="coupon-error">{couponError}</p>}
      </div>
      <div className="order-summary">
        <h3>Order Summary</h3>
        <div className="summary-item">
          <span>Subtotal:</span>
          <span>${selectedItems.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2)}</span>
        </div>
        <div className="summary-item">
          <span>Tax ({taxRate * 100}%):</span>
          <span>${(selectedItems.reduce((total, item) => total + (item.price * item.quantity), 0) * taxRate).toFixed(2)}</span>
        </div>
        <div className="summary-item">
          <span>Delivery Charge:</span>
          <span>${deliveryCharge}</span>
        </div>
        {discount > 0 && (
          <div className="summary-item">
            <span>Discount ({discount}%):</span>
            <span>-${(selectedItems.reduce((total, item) => total + (item.price * item.quantity), 0) * (discount / 100)).toFixed(2)}</span>
          </div>
        )}
        <div className="summary-item total">
          <span>Total Cost:</span>
          <span>${(
            selectedItems.reduce((total, item) => total + (item.price * item.quantity), 0) +
            selectedItems.reduce((total, item) => total + (item.price * item.quantity), 0) * taxRate +
            deliveryCharge -
            selectedItems.reduce((total, item) => total + (item.price * item.quantity), 0) * (discount / 100)
          ).toFixed(2)}</span>
        </div>
      </div>
      <button onClick={handleProceedToPayment}>Proceed to Payment</button>
    </div>
  );
};

export default Checkout;*****************
*****************
File name: CustomerOrders.js
Content:
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../css/CustomerOrders.css';

const CustomerOrder = () => {
  const navigate = useNavigate();
  const [orders, setOrders] = useState([]);

  const fetchOrders = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }

      const response = await axios.get('http://localhost:5000/api/orders/customer', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setOrders(response.data);
    } catch (error) {
      console.error('Error fetching orders:', error);
    }
  }, [navigate]);

  useEffect(() => {
    fetchOrders();
  }, [fetchOrders]);

  const handleOrderClick = (orderId) => {
    navigate(`/order/${orderId}`);
  };

  return (
    <div className="customer-order-container">
      <h2 className="customer-order-page-title">Orders</h2>
      {orders.length === 0 ? (
        <p>No orders found.</p>
      ) : (
        <div className="customer-order-items-container">
          {orders.map((order) => (
            <div key={order._id} className="customer-order-item">
              <div className="customer-order-item-details">
                <h3 className="customer-order-name">Order ID: {order._id}</h3>
                <p>Order Date: {new Date(order.orderTime).toLocaleDateString()}</p>
                <ul className="customer-order-items-list">
                  {order.items.map((item) => (
                    <li key={item.product_id} className="customer-order-item-row">
                      <div className="customer-order-image-container">
                        <img
                          src={`http://localhost:5000/api/products/images/${item.image_id}`}
                          alt={item.name}
                          className="customer-order-image"
                        />
                      </div>
                      <div className="customer-order-item-info">
                        <p className="customer-order-item-name">{item.name}</p>
                        <p className="customer-order-item-quantity">Quantity: {item.quantity} ,  Delivery Status: {item.deliveryStatus}</p>
                      </div>
                    </li>
                  ))}
                </ul>
                <button className="customer-order-details-button" onClick={() => handleOrderClick(order._id)}>
                  View Details
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default CustomerOrder;*****************
*****************
File name: file_contents.txt
Content:
*****************
*****************
File name: Footer.js
Content:
import React from 'react';
import '../css/Footer.css';

const Footer = () => {
    return (
        <footer className="footer">
            <div className="footer-container">
                <div className="footer-column">
                    <h3>Shop Address</h3>
                    <p>123 Toy Street</p>
                    <p>Cityville, Toyland</p>
                    <p>Country</p>
                </div>
                <div className="footer-column">
                    <h3>Contact Details</h3>
                    <p>Email: info@example.com</p>
                    <p>Phone: +123-456-7890</p>
                </div>
                <div className="footer-column">
                    <h3>Terms and Conditions</h3>
                    <p>Terms of Service</p>
                    <p>Privacy Policy</p>
                </div>
            </div>
            <div className="footer-bottom">
                <p>&copy; 2024 Toy Land. All rights reserved.</p>
            </div>
        </footer>
    );
};

export default Footer;
*****************
*****************
File name: ForgetPassword.js
Content:
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import '../css/ForgetPassword.css';

const ForgetPassword = () => {
  const [email, setEmail] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState({ text: '', type: '' });
  const navigate = useNavigate();

  const handleForgetPassword = async (e) => {
    e.preventDefault();
    if (newPassword !== confirmPassword) {
      setMessage({ text: 'Passwords do not match', type: 'error' });
      return;
    }
    try {
      const response = await axios.post('http://localhost:5000/api/auth/forget-password', {
        email,
        newPassword,
      });
      setMessage({ text: response.data.message, type: 'success' });
      setTimeout(() => {
        navigate('/login');
      }, 2000);
    } catch (error) {
      setMessage({ text: error.response.data.message, type: 'error' });
    }
  };

  return (
    <div className="forget-password-container-forget">
      <h2 className="forget-password-title-forget">Forget Password</h2>
      <form onSubmit={handleForgetPassword} className="forget-password-form-forget">
        <div className="form-group-forget">
          <label htmlFor="email" className="form-label-forget">Email:</label>
          <input
            type="email"
            id="email"
            name="email"
            placeholder="Enter your email"
            className="form-input-forget"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="form-group-forget">
          <label htmlFor="newPassword" className="form-label-forget">New Password:</label>
          <input
            type="password"
            id="newPassword"
            name="newPassword"
            placeholder="Enter new password"
            className="form-input-forget"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
          />
        </div>
        <div className="form-group-forget">
          <label htmlFor="confirmPassword" className="form-label-forget">Confirm Password:</label>
          <input
            type="password"
            id="confirmPassword"
            name="confirmPassword"
            placeholder="Confirm new password"
            className="form-input-forget"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="form-button-forget">Reset Password</button>
        {message.text && (
          <div className={`message-forget ${message.type}`}>{message.text}</div>
        )}
      </form>
    </div>
  );
};

export default ForgetPassword;*****************
*****************
File name: Hero.js
Content:
import React from 'react';
import '../css/Hero.css';
import HeroImage from '../toy_images/image.jpg';
const Hero = () => {
    return (
        <div>
            <h2 className='hero-title'>Welcome to Toy Land</h2>
            <h2 className='hero-title'> Find the perfect Toy for your Joy</h2>
            <img src={HeroImage} alt="Random" className='hero-photo' />
            <h2 className='hero-title-h'>Explore the Categories</h2>
        </div>
    );
};

export default Hero;*****************
*****************
File name: IndividualProduct.js
Content:
import React, { useState } from 'react';
import { Container, Row, Col, Button } from 'react-bootstrap';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../css/IndividualProduct.css';

const IndividualProduct = () => {
  const location = useLocation();
  const { product } = location.state;
  const navigate = useNavigate();
  const [buttonText, setButtonText] = useState('Add to Cart');

  const addToCart = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }
      await axios.post(
        'http://localhost:5000/api/cart/insert',
        { product_id: product._id },
        {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setButtonText('Added to Cart');
      setTimeout(() => {
        setButtonText('Add to Cart');
      }, 2000);
      navigate('/cart');
      // Show success message or perform any other action
    } catch (error) {
      console.error('Error adding to cart:', error);
    }
  };

  return (
    <Container className="individual-product">
      <Row>
        <Col md={6} className="product-image-container">
          <img
            src={`http://localhost:5000/api/products/images/${product.image_id}`}
            alt={product.name}
            className="product-image"
          />
        </Col>
        <Col md={6} className="product-details">
          <h2 className="product-name">{product.name}</h2>
          <p className="product-price">Price: {product.price}</p>
          <div className="product-description">
            <p>Description: {product.description}</p>
          </div>
          <div className="product-description">
            <p>Age Range: {product.age_range} Years +</p>
          </div>
          <div className="product-description">
            <p>Stock: {product.stock}</p>
          </div>
          <Button variant="primary" className="add-to-cart-btn" onClick={addToCart}>
            {buttonText}
          </Button>
        </Col>
      </Row>
    </Container>
  );
};

export default IndividualProduct;*****************
*****************
File name: Navbar.js
Content:
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../css/Navbar.css';
import ToyLogo from '../toy_images/toy-land-logo1.png';

const Navbar = () => {
  const [categories, setCategories] = useState([]);
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/categories/all');
        setCategories(response.data);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/home');
  };

  return (
    <nav className="navbar">
      <Link to="/">
        <img src={ToyLogo} alt="Company Logo" />
      </Link>
      <ul>
        <li className="dropdown">
          <Link>Shop</Link>
          <div className="dropdown-content">
            {categories.map((category) => (
              <a key={category._id} href={`/category/${category.link}`}>
                {category.CategoryName}
              </a>
            ))}
          </div>
        </li>
        <li>
          <Link to="/cart">Cart</Link>
        </li>
        {token ? (
          <li className="dropdown">
            <Link>Account</Link>
            <div className="dropdown-content">
              <Link to="/profile">Profile</Link>
              <Link to="/customer-orders">Orders</Link>
              <a href="/login" onClick={handleLogout}>
                Sign Out
              </a>
            </div>
          </li>
        ) : (
          <>
            <li>
              <Link to="/login">SignIn/SignUp</Link>
            </li>
          </>
        )}
      </ul>
    </nav>
  );
};

export default Navbar;*****************
*****************
File name: Payment.js
Content:
import React, { useState, useEffect, useCallback } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../css/Payment.css';

const Payment = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [paymentMethod, setPaymentMethod] = useState('');
  const [cardholderName, setCardholderName] = useState('');
  const [cardNumber, setCardNumber] = useState('');
  const [expiryDate, setExpiryDate] = useState('');
  const [cvv, setCvv] = useState('');
  const [saveCardDetails, setSaveCardDetails] = useState(false);
  const [paymentMethodName, setPaymentMethodName] = useState('');
  const [savedPaymentMethods, setSavedPaymentMethods] = useState([]);
  const [useExistingPayment, setUseExistingPayment] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');

  const {
    selectedItems,
    phoneNumber,
    address,
    totalCost,
  } = location.state;

  const fetchSavedPaymentMethods = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }

      const response = await axios.get('http://localhost:5000/api/orders/payments', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      setSavedPaymentMethods(response.data);
    } catch (error) {
      console.error('Error fetching saved payment methods:', error);
    }
  }, [navigate]);

  useEffect(() => {
    fetchSavedPaymentMethods();
  }, [fetchSavedPaymentMethods]);

  const handlePaymentMethodChange = (e) => {
    setPaymentMethod(e.target.value);
  };

  const handleCardholderNameChange = (e) => {
    setCardholderName(e.target.value);
  };

  const handleCardNumberChange = (e) => {
    const value = e.target.value.replace(/\D/g, '');
    setCardNumber(value);
  };

  const handleExpiryDateChange = (e) => {
    const value = e.target.value.replace(/\D/g, '');
    const formattedValue = value.replace(/(\d{2})(\d{0,2})/, '$1/$2');
    setExpiryDate(formattedValue);
  };

  const handleCvvChange = (e) => {
    const value = e.target.value.replace(/\D/g, '');
    setCvv(value.slice(0, 3));
  };

  const isCardDetailsValid = () => {
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear() % 100;
    const currentMonth = currentDate.getMonth() + 1;

    const [expiryMonth, expiryYear] = expiryDate.split('/');

    if (
      !cardholderName ||
      cardNumber.length !== 16 ||
      cvv.length !== 3 ||
      !expiryMonth ||
      !expiryYear ||
      expiryYear < currentYear ||
      (expiryYear === currentYear && expiryMonth < currentMonth)
    ) {
      return false;
    }

    return true;
  };

  const placeOrder = async () => {
    if (useExistingPayment) {
      if (!paymentMethod) {
        alert('Please select a payment method.');
        return;
      }
    } else {
      if (!isCardDetailsValid()) {
        alert('Please enter valid card details.');
        return;
      }
    }

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }

      let cardDetails = null;
      if (useExistingPayment) {
        const selectedPaymentMethod = savedPaymentMethods.find(
          (method) => method._id === paymentMethod
        );
        if (selectedPaymentMethod) {
          cardDetails = {
            cardholderName: selectedPaymentMethod.cardholderName,
            cardNumber: selectedPaymentMethod.cardNumber,
            expiryDate: selectedPaymentMethod.expiryDate,
            cvv: selectedPaymentMethod.cvv,
            paymentMethodName: selectedPaymentMethod.paymentMethodName,
          };
        }
      } else if (saveCardDetails) {
        cardDetails = {
          cardholderName,
          cardNumber,
          expiryDate,
          cvv,
          paymentMethodName,
        };
      }

      const orderData = {
        items: selectedItems.map((item) => ({
          _id: item._id,
          quantity: item.quantity,
        })),
        cost: totalCost,
        tax: location.state.tax,
        discount: location.state.discount,
        cardDetails,
        phoneNumber,
        address,
        deliveryStatus: 'Pending',
      };

      await axios.post('http://localhost:5000/api/orders/place', orderData, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });

      // Delete selected items from the cart
      const selectedProductIds = selectedItems.map((item) => item._id);
      await axios.delete('http://localhost:5000/api/cart/delete', {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        data: {
          product_ids: selectedProductIds,
        },
      });

      // Display success message
      setSuccessMessage('Payment successful!');

      // Navigate to /home after a short delay
      setTimeout(() => {
        navigate('/home');
      }, 2000);
    } catch (error) {
      console.error('Error placing order:', error);
    }
  };

  return (
    <div className="payment-container">
      <h2 className="payment-title">Payment</h2>
      <div className="payment-order-summary">
        <h3 className="payment-order-summary-title">Order Summary</h3>
        <p className="payment-order-summary-text">Total Cost: ${totalCost.toFixed(2)}</p>
        <p className="payment-order-summary-text">Number of Items: {selectedItems.length}</p>
      </div>
      <div className="payment-method">
        <h3 className="payment-method-title">Payment Method</h3>
        {savedPaymentMethods.length > 0 && (
          <div className="payment-saved-methods">
            <label className="payment-saved-label">
              <input
                type="checkbox"
                checked={useExistingPayment}
                onChange={(e) => setUseExistingPayment(e.target.checked)}
              />
              <span className="payment-saved-text">Use existing payment method</span>
            </label>
            {useExistingPayment && (
              <select
                className="payment-saved-select"
                value={paymentMethod}
                onChange={handlePaymentMethodChange}
              >
                <option value="">Select a payment method</option>
                {savedPaymentMethods.map((method) => (
                  <option key={method._id} value={method._id}>
                    {method.paymentMethodName}
                  </option>
                ))}
              </select>
            )}
          </div>
        )}
        {!useExistingPayment && (
          <>
            <div className="payment-options">
              <label className="payment-option-label">
                <input
                  type="radio"
                  value="credit"
                  checked={paymentMethod === 'credit'}
                  onChange={handlePaymentMethodChange}
                />
                <span className="payment-option-text">Credit Card</span>
              </label>
              {paymentMethod === 'credit' && (
                <div className="payment-card-details">
                  <input
                    type="text"
                    placeholder="Cardholder Name"
                    value={cardholderName}
                    onChange={handleCardholderNameChange}
                  />
                  <input
                    type="text"
                    placeholder="Card Number"
                    value={cardNumber}
                    onChange={handleCardNumberChange}
                    maxLength={16}
                  />
                  <input
                    type="text"
                    placeholder="Expiry Date (MM/YY)"
                    value={expiryDate}
                    onChange={handleExpiryDateChange}
                    maxLength={5}
                  />
                  <input
                    type="password"
                    placeholder="CVV"
                    value={cvv}
                    onChange={handleCvvChange}
                    maxLength={3}
                  />
                  <label className="payment-save-card-label">
                    <input
                      type="checkbox"
                      checked={saveCardDetails}
                      onChange={(e) => setSaveCardDetails(e.target.checked)}
                    />
                    <span className="payment-save-card-text">Save Card Details</span>
                  </label>
                  {saveCardDetails && (
                    <input
                      type="text"
                      placeholder="Payment Method Name"
                      value={paymentMethodName}
                      onChange={(e) => setPaymentMethodName(e.target.value)}
                    />
                  )}
                </div>
              )}
              <label className="payment-option-label">
                <input
                  type="radio"
                  value="debit"
                  checked={paymentMethod === 'debit'}
                  onChange={handlePaymentMethodChange}
                />
                <span className="payment-option-text">Debit Card</span>
              </label>
              {paymentMethod === 'debit' && (
                <div className="payment-card-details">
                  <input
                    type="text"
                    placeholder="Cardholder Name"
                    value={cardholderName}
                    onChange={handleCardholderNameChange}
                  />
                  <input
                    type="text"
                    placeholder="Card Number"
                    value={cardNumber}
                    onChange={handleCardNumberChange}
                    maxLength={16}
                  />
                  <input
                    type="text"
                    placeholder="Expiry Date (MM/YY)"
                    value={expiryDate}
                    onChange={handleExpiryDateChange}
                    maxLength={5}
                  />
                  <input
                    type="password"
                    placeholder="CVV"
                    value={cvv}
                    onChange={handleCvvChange}
                    maxLength={3}
                  />
                  <label className="payment-save-card-label">
                    <input
                      type="checkbox"
                      checked={saveCardDetails}
                      onChange={(e) => setSaveCardDetails(e.target.checked)}
                    />
                    <span className="payment-save-card-text">Save Card Details</span>
                  </label>
                  {saveCardDetails && (
                    <input
                      type="text"
                      placeholder="Payment Method Name"
                      value={paymentMethodName}
                      onChange={(e) => setPaymentMethodName(e.target.value)}
                    />
                  )}
                </div>
              )}
            </div>
          </>
        )}
      </div>
      {successMessage && <p className="payment-success-message">{successMessage}</p>}
      <button className="payment-button" onClick={placeOrder}>
        Pay
      </button>
    </div>
  );
};

export default Payment;*****************
*****************
File name: Profile.js
Content:
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../css/Profile.css';
import { FaEdit } from 'react-icons/fa';

const Profile = () => {
  const [profile, setProfile] = useState({
    firstname: '',
    lastname: '',
    email: '',
    phone_number: '',
    addresses: [],
  });
  const [isEditing, setIsEditing] = useState(false);
  const [editedProfile, setEditedProfile] = useState({ ...profile });

  useEffect(() => {
    fetchProfile();
  }, []);

  const fetchProfile = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        // Redirect to login page if token is not available
        return;
      }
      const response = await axios.get('http://localhost:5000/api/profile/get', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setProfile(response.data);
    } catch (error) {
      console.error('Error fetching profile:', error);
    }
  };

  const handleEdit = () => {
    setEditedProfile({ ...profile });
    setIsEditing(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditedProfile((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleAddressChange = (index, field, value) => {
    const updatedAddresses = [...editedProfile.addresses];
    updatedAddresses[index] = { ...updatedAddresses[index], [field]: value };
    setEditedProfile((prevState) => ({
      ...prevState,
      addresses: updatedAddresses,
    }));
  };

  const handleDeleteAddress = (index) => {
    const updatedAddresses = [...editedProfile.addresses];
    updatedAddresses.splice(index, 1);
    setEditedProfile((prevState) => ({
      ...prevState,
      addresses: updatedAddresses,
    }));
  };

  const handleAddAddress = () => {
    setEditedProfile((prevState) => ({
      ...prevState,
      addresses: [
        ...prevState.addresses,
        {
          address_line_1: '',
          address_line_2: '',
          city: '',
          state: '',
          zipcode: '',
        },
      ],
    }));
  };

  const handleSave = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        // Redirect to login page if token is not available
        return;
      }

      // Validate address fields
      const isAddressValid = editedProfile.addresses.every((address) => {
        return (
          (address.address_line_1.trim() !== '' || address.address_line_2.trim() !== '') &&
          address.city.trim() !== '' &&
          address.state.trim() !== '' &&
          address.zipcode.trim() !== ''
        );
      });

      if (!isAddressValid) {
        alert('Please fill in either address line 1 or address line 2, and all other required address fields.');
        return;
      }

      await axios.put('http://localhost:5000/api/profile/update', editedProfile, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      alert('Profile updated successfully');
      setIsEditing(false);
      fetchProfile();
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };

  const handleCancel = () => {
    setIsEditing(false);
  };

  return (
    <div className="profile-container">
      <h2 className="profile-title">
        Profile
        {!isEditing && (
          <FaEdit className="edit-icon" onClick={handleEdit} />
        )}
      </h2>
      <div className="profile-card">
        <div className="profile-field">
          <label className="profile-label">First Name:</label>
          {isEditing ? (
            <input
              type="text"
              name="firstname"
              value={editedProfile.firstname}
              onChange={handleChange}
              className="profile-input"
            />
          ) : (
            <span className="profile-value">{profile.firstname}</span>
          )}
        </div>
        <div className="profile-field">
          <label className="profile-label">Last Name:</label>
          {isEditing ? (
            <input
              type="text"
              name="lastname"
              value={editedProfile.lastname}
              onChange={handleChange}
              className="profile-input"
            />
          ) : (
            <span className="profile-value">{profile.lastname}</span>
          )}
        </div>
        <div className="profile-field">
          <label className="profile-label">Email:</label>
          {isEditing ? (
            <input
              type="email"
              name="email"
              value={editedProfile.email}
              onChange={handleChange}
              className="profile-input"
            />
          ) : (
            <span className="profile-value">{profile.email}</span>
          )}
        </div>
        <div className="profile-field">
          <label className="profile-label">Phone Number:</label>
          {isEditing ? (
            <input
              type="text"
              name="phone_number"
              value={editedProfile.phone_number}
              onChange={handleChange}
              className="profile-input"
            />
          ) : (
            <span className="profile-value">{profile.phone_number}</span>
          )}
        </div>
        <div className="profile-field">
          <label className="profile-label">Addresses:</label>
          {!isEditing ? (
            <ul className="address-list">
              {profile.addresses.map((address, index) => (
                <li key={index} className="address-item">
                  <span className="address-number">{index + 1}.</span>
                  <span>{address.address_line_1}, {address.address_line_2}, {address.city}, {address.state}, {address.zipcode}</span>
                </li>
              ))}
            </ul>
          ) : (
            <div>
              {editedProfile.addresses.map((address, index) => (
                <div key={index} className="address-item">
                  <div className="address-row">
                    <input
                      type="text"
                      value={address.address_line_1}
                      onChange={(e) =>
                        handleAddressChange(index, 'address_line_1', e.target.value)
                      }
                      className="address-input"
                      placeholder="Address Line 1"
                    />
                    <input
                      type="text"
                      value={address.address_line_2}
                      onChange={(e) =>
                        handleAddressChange(index, 'address_line_2', e.target.value)
                      }
                      className="address-input"
                      placeholder="Address Line 2"
                    />
                    <input
                      type="text"
                      value={address.city}
                      onChange={(e) =>
                        handleAddressChange(index, 'city', e.target.value)
                      }
                      className="address-input"
                      placeholder="City"
                    />
                    <input
                      type="text"
                      value={address.state}
                      onChange={(e) =>
                        handleAddressChange(index, 'state', e.target.value)
                      }
                      className="address-input"
                      placeholder="State"
                    />
                    <input
                      type="text"
                      value={address.zipcode}
                      onChange={(e) =>
                        handleAddressChange(index, 'zipcode', e.target.value)
                      }
                      className="address-input"
                      placeholder="Zipcode"
                    />
                  </div>
                  {editedProfile.addresses.length > 1 && (
                    <button
                      className="delete-btn"
                      onClick={() => handleDeleteAddress(index)}
                    >
                      Delete
                    </button>
                  )}
                </div>
              ))}
              <button className="add-btn" onClick={handleAddAddress}>
                Add Address
              </button>
            </div>
          )}
        </div>
        {isEditing && (
          <div className="profile-actions">
            <button className="save-btn" onClick={handleSave}>
              Save
            </button>
            <button className="cancel-btn" onClick={handleCancel}>
              Cancel
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Profile;*****************
*****************
File name: SignInForm.js
Content:
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate, Link } from 'react-router-dom';
import '../css/SignIn.css';

const SignInForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/api/auth/login', {
        email,
        password,
      });
      localStorage.setItem('token', response.data.token);
      console.log(response.data.token);
      navigate('/home');
    } catch (error) {
      setError('Invalid email or password');
    }
  };

  return (
    <div className="signin-form-container">
      <form onSubmit={handleLogin} className="signin-form">
        <h1 className="signin-title">Sign In</h1>
        <div className="signin-input-container">
          <label htmlFor="email" className="signin-email-label">
            Email:
          </label>
          <input
            type="email"
            placeholder="Enter your email"
            name="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="signin-email-input"
          />
        </div>
        <div className="signin-input-container">
          <label htmlFor="password" className="signin-password-label">
            Password:
          </label>
          <input
            type="password"
            name="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="signin-password-input"
          />
        </div>
        <div className="signin-links-container">
          <a href="/forget-password" className="signin-forgot-password-link">
            Forget Password
          </a>
          <Link to="/signup" className="signin-register-link">
            Register
          </Link>
        </div>
        <button type="submit" className="signin-submit-button">
          Sign IN
        </button>
        {error && <div className="signin-error-message">{error}</div>}
      </form>
    </div>
  );
};

export default SignInForm;*****************
*****************
File name: SignUpForm.js
Content:
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import '../css/SignUp.css';

const SignUpForm = () => {
  const [firstname, setFirstname] = useState('');
  const [lastname, setLastname] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [dateOfBirth, setDateOfBirth] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [addressLine1, setAddressLine1] = useState('');
  const [addressLine2, setAddressLine2] = useState('');
  const [city, setCity] = useState('');
  const [state, setState] = useState('');
  const [zipcode, setZipcode] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleRegistration = async (e) => {
    e.preventDefault();

    if (!validateName(firstname) || !validateName(lastname)) {
      setError('Names must contain only alphabets');
      return;
    }

    if (!validateEmail(email)) {
      setError('Invalid email address');
      return;
    }

    if (!validatePassword(password)) {
      setError('Password must be at least 8 characters long');
      return;
    }

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    try {
      await axios.post('http://localhost:5000/api/auth/register', {
        firstname,
        lastname,
        email,
        password,
        dateOfBirth,
        phoneNumber,
        address: {
          address_line_1: addressLine1,
          address_line_2: addressLine2,
          city,
          state,
          zipcode,
        },
      });
      setError('User Registered Successfully');
      navigate('/login');
    } catch (error) {
      if (error.response && error.response.data && error.response.data.error) {
        setError(error.response.data.error);
      } else {
        setError('Registration failed. Please try again.');
      }
    }
  };

  const validateName = (name) => {
    const nameRegex = /^[a-zA-Z]+$/;
    return nameRegex.test(name);
  };

  const validateEmail = (email) => {
    const emailRegex = /^\w+([.-]?\w+)@\w+([.-]?\w+)(.\w{2,3})+$/;
    return emailRegex.test(email);
  };

  const validatePassword = (password) => {
    return password.length >= 8;
  };

  return (
    <div className="signup-form-container">
      <h1 className="signup-title">Sign Up</h1>
      <form onSubmit={handleRegistration} className="signup-form">
        <div className="signup-input-row">
          <div className="signup-input-group">
            <label htmlFor="first_name" className="signup-label">
              First Name:
            </label>
            <input
              type="text"
              id="first_name"
              value={firstname}
              onChange={(e) => setFirstname(e.target.value)}
              required
              className="signup-input"
            />
          </div>
          <div className="signup-input-group">
            <label htmlFor="last_name" className="signup-label">
              Last Name:
            </label>
            <input
              type="text"
              id="last_name"
              value={lastname}
              onChange={(e) => setLastname(e.target.value)}
              required
              className="signup-input"
            />
          </div>
        </div>
        <div className="signup-input-group">
          <label htmlFor="email" className="signup-label">
            Email:
          </label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="signup-input"
          />
        </div>
        <div className="signup-input-row">
          <div className="signup-input-group">
            <label htmlFor="date_of_birth" className="signup-label">
              Date of Birth:
            </label>
            <input
              type="date"
              id="date_of_birth"
              value={dateOfBirth}
              onChange={(e) => setDateOfBirth(e.target.value)}
              required
              className="signup-input"
            />
          </div>
          <div className="signup-input-group">
            <label htmlFor="phone_number" className="signup-label">
              Phone Number:
            </label>
            <input
              type="tel"
              id="phone_number"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
              required
              className="signup-input"
            />
          </div>
        </div>
        <div className="signup-input-group">
          <label htmlFor="password" className="signup-label">
            Password:
          </label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="signup-input"
          />
        </div>
        <div className="signup-input-group">
          <label htmlFor="confirm_password" className="signup-label">
            Confirm Password:
          </label>
          <input
            type="password"
            id="confirm_password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
            className="signup-input"
          />
        </div>
        <div className="signup-input-row">
          <div className="signup-input-group">
            <label htmlFor="address_line_1" className="signup-label">
              Address Line 1:
            </label>
            <input
              type="text"
              id="address_line_1"
              value={addressLine1}
              onChange={(e) => setAddressLine1(e.target.value)}
              required
              className="signup-input"
            />
          </div>
          <div className="signup-input-group">
            <label htmlFor="address_line_2" className="signup-label">
              Address Line 2:
            </label>
            <input
              type="text"
              id="address_line_2"
              value={addressLine2}
              onChange={(e) => setAddressLine2(e.target.value)}
              className="signup-input"
            />
          </div>
        </div>
        <div className="signup-input-row">
          <div className="signup-input-group">
            <label htmlFor="city" className="signup-label">
              City:
            </label>
            <input
              type="text"
              id="city"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              required
              className="signup-input"
            />
          </div>
          <div className="signup-input-group">
            <label htmlFor="state" className="signup-label">
              State:
            </label>
            <input
              type="text"
              id="state"
              value={state}
              onChange={(e) => setState(e.target.value)}
              required
              className="signup-input"
            />
          </div>
          <div className="signup-input-group">
            <label htmlFor="zipcode" className="signup-label">
              Zipcode:
            </label>
            <input
              type="text"
              id="zipcode"
              value={zipcode}
              onChange={(e) => setZipcode(e.target.value)}
              required
              className="signup-input"
            />
          </div>
        </div>
        <button type="submit" className="signup-button">
          Create Account
        </button>
        {error && <div className="signup-error-message">{error}</div>}
      </form>
    </div>
  );
};

export default SignUpForm;*****************
*****************
File name: viewAll.js
Content:
import React from 'react';
import { Container } from 'react-bootstrap';
import '../css/viewAll.css';

function ViewAll() {

  return (
    <Container className="container-view">
        <a href="/category/view-all-products" className="view-all-link">
          <div className="view-all-text">Click Here to View All Types of Toys</div>
        </a>
    </Container>
  );
};

export default ViewAll;
*****************
*****************
File name: ViewOrder.js
Content:
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import '../css/ViewOrder.css';

const ViewOrder = () => {
  const { orderId } = useParams();
  const [order, setOrder] = useState(null);

  useEffect(() => {
    const fetchOrder = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          // Redirect to login page if token is not available
          window.location.href = '/login';
          return;
        }

        const response = await axios.get(`http://localhost:5000/api/orders/${orderId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setOrder(response.data);
      } catch (error) {
        console.error('Error fetching order:', error);
      }
    };

    fetchOrder();
  }, [orderId]);

  const handleCancellation = async (itemId) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        // Redirect to login page if token is not available
        window.location.href = '/login';
        return;
      }

      await axios.put(`http://localhost:5000/api/orders/${orderId}/${itemId}/cancel`, null, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      // Refresh the order data after cancellation
      const response = await axios.get(`http://localhost:5000/api/orders/${orderId}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setOrder(response.data);
    } catch (error) {
      console.error('Error cancelling item:', error);
    }
  };

  if (!order) {
    return <div>Loading...</div>;
  }

  return (
    <div className="view-order-container">
      <h2 className="view-order-page-title">Order Details</h2>
      <div className="view-order-info">
        <p><strong>Order Id:</strong> {order._id}</p>
        <p><strong>Order date:</strong> {order.orderTime}</p>
        <p><strong>Delivery Address:</strong> {order.address.address_line_1}, {order.address.address_line_2}, {order.address.city}, {order.address.state}, {order.address.zipcode}</p>
        <p><strong>Phone Number:</strong> {order.phoneNumber}</p>
      </div>
      <div className="view-order-items-container">
        {order.items.map((item) => (
          <div className="view-order-item" key={item.product_id}>
            <img
              src={`http://localhost:5000/api/products/images/${item.image_id}`}
              alt={item.name}
              className="view-order-toy-image"
            />
            <div className="view-order-item-details">
              <p className="view-order-toy-name">{item.name}</p>
              <p><strong>Quantity:</strong> {item.quantity}</p>
              {item.deliveryStatus === 'Pending' && (
                <>
                  <p><strong>Estimated Date of Delivery:</strong> {item.EstimatedDeliveryDate}</p>
                  <p className="view-order-delivery-status pending"><strong>Delivery Status:</strong> {item.deliveryStatus}</p>
                </>
              )}
              {item.deliveryStatus === 'Delivered' && (
                <>
                  <p><strong>Delivery Date:</strong> {item.DeliveryDate}</p>
                  <p className="view-order-delivery-status delivered"><strong>Delivery Status:</strong> {item.deliveryStatus}</p>
                </>
              )}
              {item.deliveryStatus === 'Cancelled' && (
                <>
                  <p className="view-order-delivery-status cancelled"><strong>Delivery Status:</strong> {item.deliveryStatus}</p>
                  <p className="view-order-refund-message"><strong>Refund Message:</strong> {item.RefundMessage}</p>
                </>
              )}
              {item.deliveryStatus === 'Transit' && (
                <p className="view-order-delivery-status transit"><strong>Delivery Status:</strong> {item.deliveryStatus}</p>
              )}
              <p><strong>Cost:</strong> ${item.Cost}</p>
              {item.deliveryStatus === 'Pending' ? (
                <button className="view-order-cancel-button" onClick={() => handleCancellation(item.product_id)}>
                  Cancel
                </button>
              ) : (
                item.deliveryStatus === 'Cancelled' ? (
                  <p>Check your Payment Account for refund.</p>
                ) : (
                  <p>Cancellation not possible</p>
                )
              )}
            </div>
          </div>
        ))}
      </div>
      <p><strong>Total Order Amount:</strong> ${order.Totalcost.toFixed(2)}</p>
    </div>
  );
};

export default ViewOrder;*****************
